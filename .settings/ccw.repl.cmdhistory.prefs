cmdhistory=[";; Switching to serial-counterpoint.total-serial namespace" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-i       (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-vi      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime]\\n      (.addNote phrase-i (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-vi (new Note (+ note 60) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-vi phrase-vi)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-vi)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Mx/total-serial\\" java.util.Date \\".mid\\"))))\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-vi      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime]\\n      (.addNote phrase-i (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-vi (new Note (+ note 60) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-vi phrase-vi)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-vi)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Mx/total-serial\\" java.util.Date \\".mid\\"))))\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-vi      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime]\\n      (.addNote phrase-i (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-iv (new Note (+ note 60) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-vi)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Mx/total-serial\\" java.util.Date \\".mid\\"))))\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime]\\n      (.addNote phrase-i (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-iv (new Note (+ note 60) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Mx/total-serial\\" java.util.Date \\".mid\\"))))\\n\\n" ";; Switching to serial-counterpoint.total-serial namespace" "(make-music)" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime]\\n      (.addNote phrase-i (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-iv (new Note (+ note 60) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(.java.util.Date)" "(java.util/Date)" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime]\\n      (.addNote phrase-i (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-iv (new Note (+ note 60) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime]\\n      (.addNote phrase-i (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 60) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-iv (new Note (+ note 60) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime]\\n      (.addNote phrase-i (new Note (+ note 65) JMC/C)))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 55) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 45) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-iv (new Note (+ note 35) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime \\n            rhythm prime_rhythm]\\n      (.addNote phrase-i (new Note (+ note 65) (* JMC/C rhythm))))         \\n\\n    (doseq [note retrograde]\\n      (.addNote phrase-ii (new Note (+ note 55) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion]\\n      (.addNote phrase-iii (new Note (+ note 45) JMC/C)))         \\n\\n    (doseq [note inversion]\\n      (.addNote phrase-iv (new Note (+ note 35) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime \\n            rhythm prime_rhythm]\\n      (.addNote phrase-i (new Note (+ note 65) (* JMC/C rhythm))))         \\n\\n    (doseq [note retrograde\\n            rhythm retrograde_rhythm]\\n      (.addNote phrase-ii (new Note (+ note 55) JMC/C)))         \\n\\n    (doseq [note retrogradeinversion\\n            rhythm retrogradeinversion_rhythm]\\n      (.addNote phrase-iii (new Note (+ note 45) JMC/C)))         \\n\\n    (doseq [note inversion\\n            rhythm inversion_rhythm]\\n      (.addNote phrase-iv (new Note (+ note 35) JMC/C)))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [note prime \\n            rhythm prime_rhythm]\\n      (.addNote phrase-i (new Note (+ note 65) (* JMC/C rhythm))))         \\n\\n    (doseq [note retrograde\\n            rhythm retrograde_rhythm]\\n      (.addNote phrase-ii (new Note (+ note 55) (* JMC/C rhythm))))         \\n\\n    (doseq [note retrogradeinversion\\n            rhythm retrogradeinversion_rhythm]\\n      (.addNote phrase-iii (new Note (+ note 45) (* JMC/C rhythm))))         \\n\\n    (doseq [note inversion\\n            rhythm inversion_rhythm]\\n      (.addNote phrase-iv (new Note (+ note 35) (* JMC/C rhythm))))         \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth index prime_rhythm)]              \\n        (.addNote phrase-i (new Note (+ note 65) (* JMC/C rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth index prime_rhythm)]   \\n        (.addNote phrase-ii (new Note (+ note 55) (* JMC/C rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth index prime_rhythm)]   \\n        (.addNote phrase-iii (new Note (+ note 45) (* JMC/C rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth index prime_rhythm)]   \\n        (.addNote phrase-iv (new Note (+ note 35) (* JMC/C rhythm)))\\n        (def index (inc index))))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth  prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65) (* JMC/C rhythm)))\\n        (def index (inc index))))" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth index prime_rhythm)]              \\n        (.addNote phrase-i (new Note (+ note 65) (* JMC/C rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth index prime_rhythm)]   \\n        (.addNote phrase-ii (new Note (+ note 55) (* JMC/C rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth index prime_rhythm)]   \\n        (.addNote phrase-iii (new Note (+ note 45) (* JMC/C rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth index prime_rhythm)]   \\n        (.addNote phrase-iv (new Note (+ note 35) (* JMC/C rhythm)))\\n        (def index (inc index))))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65) (* JMC/C rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55) (* JMC/C rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45) (* JMC/C rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35) (* JMC/C rhythm)))\\n        (def index (inc index))))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65) (* JMC/C rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55) (* JMC/C rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45) (* JMC/C rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35) (* JMC/C rhythm)))\\n        (def index (inc index))))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    \\n    (dotime [n 36]\\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    \\n    (loop [n 36]\\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    \\n    (loop [n 36]\\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    )\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    \\n    (def n 0)\\n    (while (n < 128)\\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    (def n (inc n))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    \\n    (def n 0)\\n    (while \\n      (n < 128)\\n      (do \\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    (def n (inc n))\\n    ))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    \\n    (for [x (range 128)]\\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    \\n    (loop [x (range 128)]\\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    (loop [x 100]\\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    )\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" ";; Switching to serial-counterpoint.total-serial namespace" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    (loop [x 100]\\n      \\n      (println \\"fafa\\")\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    )\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)\\n        rnd-i          (rand-int 12)\\n        rnd-ii         (rand-int 12)\\n        rnd-iii        (rand-int 12)\\n        rnd-vi         (rand-int 12)]            \\n    \\n    (doseq [note prime\\n            note retrograde\\n            note retrogradeinversion\\n            note inversion]\\n    \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" ";; Switching to serial-counterpoint.total-serial namespace" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i    (rand-int seed))\\n        (def rnd-ii   (rand-int seed))\\n        (def rnd-iii  (rand-int seed))\\n        (def rnd-vi   (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1,3,2,  2,1,3,  2,3,1,  3,1,2])\\n(def retrograde_rhythm          [2,1,3,  1,3,2,  3,1,2,  2,3,1])\\n(def retrogradeinversion_rhythm [2,3,1,  3,1,2,  1,3,2,  2,1,3])\\n(def inversion_rhythm           [3,1,2,  2,3,1,  2,1,3,  1,3,2]) \\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i    (rand-int seed))\\n        (def rnd-ii   (rand-int seed))\\n        (def rnd-iii  (rand-int seed))\\n        (def rnd-vi   (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET 1/rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET 1/rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET 1/rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET 1/rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(take 12 (repeatedly rand-int 12))" "(take 12 (repeatedly (rand-int 12)))" "(rand-int 12)" "(repeatedly (rand-int 12))" "(repeatedly 12 (rand-int 12))" "(take 12 (repeatedly (rand-int 12)))" "(take 12 (repeatedly rand-int 12))" "(take 12 (repeatedly rand))" "(take 12 (repeatedly \#(rand-int 12)))" "\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 12))))\\n(def retrograde_rhythm          (reverse prime_rhythm)\\n(def retrogradeinversion_rhythm (map - 12 retrograde_rhythm)" "(def prime_rhythm               (take 12 (repeatedly \#(rand-int 12))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map - 12 retrograde_rhythm))" "retrogradeinversion_rhythm" "(map \#(- 12 %) retrograde_rhythm)" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 12))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET 1/rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET 1/rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET 1/rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET 1/rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 12))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/QUAVER rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/QUAVER rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/QUAVER rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/QUAVER rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 12))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/QUARTER rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/QUARTER rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/QUARTER rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/QUARTER rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 12))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/HALF_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/HALF_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/HALF_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/HALF_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 12))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/SEMIBREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/SEMIBREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/SEMIBREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/SEMIBREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 12))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1 1 2 2 3 4 4 3 2 2 1 1];(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [1 1 2 2 3 4 4 3 2 2 1 1]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [4 3 2 1 1 2 2 3 4 2 1 1]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0,2,1,4,5,3,10,9,11,8,6,7]) \\n(def retrograde          [7,6,8,11,9,10,3,5,4,1,2,0])\\n(def retrogradeinversion [5,6,4,1,3,2,9,7,8,11,10,12])\\n(def inversion           [12,10,11,8,7,9,2,3,1,4,6,5])\\n\\n(def prime_rhythm               [4 3 2 1 1 2 2 3 4 2 1 1]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 5 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 5 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3     10 10 9 9 9 11    8 8 8 6 7 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 11 %) retrograde_rhythm))\\n(def inversion           (map \#(- 11 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3     10 10 9 9 9 11    8 8 8 6 7 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 11 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 11 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3     10 10 9 9 9 11    8 8 8 6 7 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3     10 10 9 9 9 11    8 8 8 6 7 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3     10 10 9 9 9 11    8 8 8 6 7 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SEMI_BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SEMI_BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SEMI_BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SEMI_BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 11 %) retrograde_rhythm))\\n(def inversion           (map \#(- 11 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3     10 10 9 9 9 11    8 8 8 6 7 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 11 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 11 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 11)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SEMI_BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 11)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SEMI_BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SEMI_BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 11)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SEMI_BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 11 %) retrograde_rhythm))\\n(def inversion           (map \#(- 11 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 5 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 5 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 11)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SEMI_BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 11)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SEMI_BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SEMI_BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 11)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SEMI_BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3     10 10 9 9 9 11    8 8 8 6 7 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 1)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 8 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 8 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 1)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/BREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/BREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 8 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 8 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 1)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SEMIBREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SEMIBREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SEMIBREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SEMIBREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 8 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 8 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SEMIBREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SEMIBREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SEMIBREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SEMIBREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 8 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 8 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (/ JMC/SEMIBREVE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (/ JMC/SEMIBREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (/ JMC/SEMIBREVE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (/ JMC/SEMIBREVE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 2 2 1 1     4 4 5 3 3 3]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 8 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 8 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [1 3 3 3 2 2     5 5 6 4 4 4]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 8 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 8 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [1 3 3 3 2 2     5 5 6 4 4 4 11 11 10 10 10 12    9 9 9 7 8 8]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 8 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 8 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [1 3 3 3 2 2     5 5 6 4 4 4 11 11 10 10 10 12    9 9 9 7 8 8]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 8 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 8 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [1 3 3 3 2 2     5 5 6 4 4 4 11 11 10 10 10 12    9 9 9 7 8 8]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [1 3 3 3 2 2     5 5 6 4 4 4 11 11 10 10 10 12    9 9 9 7 8 8]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 13 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 13 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 12)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 11)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 11)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/CROTCHET rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/CROTCHET rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime_rhythm))\\n(def retrogradeinversion (map \#(- 12 %) retrograde_rhythm))\\n(def inversion           (map \#(- 12 %) prime_rhythm))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/MINIM rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/MINIM rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/MINIM rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/MINIM rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" ";; Switching to serial-counterpoint.total-serial namespace" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/MINIM rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/MINIM rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/MINIM rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/MINIM rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/QUARTER_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/QUARTER_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/QUARTER_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/QUARTER_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" ";; Switching to serial-counterpoint.total-serial namespace" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(def prime_rhythm               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n\\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(def prime_rhythm               [0 0 0 0 0 0 0 0 0 0 0 0]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(def prime_rhythm               [1 1 4 1 1 1 2 3 1 1 4 1 1]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (inc (nth prime_rhythm index))]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (inc (nth retrograde_rhythm index))]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth prime_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" ";; Switching to serial-counterpoint.total-serial namespace" "(ns serial-counterpoint.total-serial\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(def prime_rhythm               [1 1 4 1 1 1 2 3 1 1 4 1 1]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:use [clojure.core.logic])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def prime               [0 2 1 4 5 3 10 9 11 8 6 7]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(def prime_rhythm               [1 1 4 1 1 1 2 3 1 1 4 1 1]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn music-equation \\n  []\\n  (let [vars (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (\=\= q vars)\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) vars)\\n      (everyg fd/distinct vars))))" "(ns serial-counterpoint.total-serial\\n  (\:use [clojure.core.logic])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))" "\\n(defn music-equation \\n  []\\n  (let [vars (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (\=\= q vars)\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) vars)\\n      (everyg fd/distinct vars))))" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))" "(defn music-equation \\n  []\\n  (let [vars (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (\=\= q vars)\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) vars)\\n      (everyg fd/distinct vars))))" "(defn music-equation \\n  []\\n  (let [vars (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) vars)\\n      (everyg fd/distinct vars)\\n      (\=\= q vars))))" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n      (everyg fd/distinct vars)\\n      (fresh [retrograde retrogradeinversion inversion]\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrograde)\\n             (everyg fd/distinct vars)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrogradeinversion)\\n             (everyg fd/distinct vars)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) inversion)\\n             (everyg fd/distinct vars)\\n      \\n             (\=\= retrograde (reverse prime))\\n             (\=\= retrogradeinversion (map \#(- 12 %) retrograde))\\n             (\=\= inversion (map \#(- 12 %) prime))\\n      \\n      (\=\= q vars))))" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n      (everyg fd/distinct vars)\\n      (fresh [retrograde retrogradeinversion inversion]\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrograde)\\n             (everyg fd/distinct vars)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrogradeinversion)\\n             (everyg fd/distinct vars)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) inversion)\\n             (everyg fd/distinct vars)\\n      \\n             (\=\= retrograde (reverse prime))\\n             (\=\= retrogradeinversion (map \#(- 12 %) retrograde))\\n             (\=\= inversion (map \#(- 12 %) prime)))\\n      \\n      (\=\= q vars))))" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n      (everyg fd/distinct prime)\\n      (fresh [retrograde retrogradeinversion inversion]\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrograde)\\n             (everyg fd/distinct retrograde)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrogradeinversion)\\n             (everyg fd/distinct retrogradeinversion)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) inversion)\\n             (everyg fd/distinct inversion)\\n      \\n             (\=\= retrograde (reverse prime))\\n             (\=\= retrogradeinversion (map \#(- 12 %) retrograde))\\n             (\=\= inversion (map \#(- 12 %) prime)))\\n      \\n      (\=\= q vars))))" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n      (everyg fd/distinct prime)\\n      (fresh [retrograde retrogradeinversion inversion]\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrograde)\\n             (everyg fd/distinct retrograde)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrogradeinversion)\\n             (everyg fd/distinct retrogradeinversion)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) inversion)\\n             (everyg fd/distinct inversion)\\n      \\n             (\=\= retrograde (reverse prime))\\n             (\=\= retrogradeinversion (map \#(- 12 %) retrograde))\\n             (\=\= inversion (map \#(- 12 %) prime)))\\n      \\n      (\=\= q prime))))" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n      (everyg fd/distinct prime)\\n      (fresh [retrograde retrogradeinversion inversion]\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrograde)\\n             (everyg fd/distinct retrograde)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrogradeinversion)\\n             (everyg fd/distinct retrogradeinversion)\\n             (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) inversion)\\n             (everyg fd/distinct inversion)      \\n             (\=\= retrograde (reverse prime))\\n             (\=\= retrogradeinversion (map \#(- 11 %) retrograde))\\n             (\=\= inversion (map \#(- 11 %) prime)))\\n      \\n      (\=\= q prime))))" ";; Switching to serial-counterpoint.total-serial namespace" "(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n      (distribute q \:\:l/ff)\\n      (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n      (everyg fd/distinct prime)      \\n      (\=\= q prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n            (everyg fd/distinct prime))))" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n            (everyg fd/distinct prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n            (everyg fd/distinct prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 'lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n            (everyg fd/distinct prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n            (everyg fd/distinct prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run* [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n            (everyg fd/distinct prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n   (run-nc 1 [q]\\n           (\=\= q prime)\\n           (distribute q \:\:l/ff)\\n           (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) prime)\\n           (everyg fd/distinct prime))))" "(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (everyg fd/distinct prime)))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (everyg fd/distinct prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)\\n            \\n            (fresh [retrograde retrogradeinversion inversion]\\n                   (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrograde)\\n                   (fd/distinct retrograde)\\n                   (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrogradeinversion)\\n                   (fd/distinct retrogradeinversion)\\n                   (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) inversion)\\n                   (fd/distinct inversion)      \\n                   (\=\= retrograde (reverse prime))\\n                   (\=\= retrogradeinversion (map \#(- 11 %) retrograde))\\n                   (\=\= inversion (map \#(- 11 %) prime)))\\n            \\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)\\n            \\n            (fresh [retrograde]\\n                   (everyg \#(fd/in % (fd/domain 0 1 2 3 4 5 6 7 8 9 11)) retrograde)\\n                   (fd/distinct retrograde)\\n                   \\n                   (\=\= retrograde (reverse prime))\\n                   )\\n            \\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)\\n            \\n            (fresh [retrograde]                                     \\n                   (\=\= retrograde (reverse prime))))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)            \\n            (fresh [retrograde retrogradeinversion inversion]                                     \\n                   (\=\= retrograde (reverse prime))\\n                   (\=\= retrogradeinversion (map \#(- 11 %) retrograde))\\n                   (\=\= inversion (map \#(- 11 %) prime)))\\n                   )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)            \\n            (fresh [retrograde retrogradeinversion inversion]                                     \\n                   (\=\= retrograde (reverse prime))\\n                   (\=\= retrogradeinversion (map \#(- 11 %) retrograde))\\n                   (\=\= inversion (map \#(- 11 %) prime))\\n                   ))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (map \#(- 11 %) retrograde))\\n            (\=\= inversion (map \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n           ; (\=\= retrogradeinversion (map \#(- 11 %) retrograde))\\n            ;(\=\= inversion (map \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (map \#(- 11 %) retrograde))\\n            ;(\=\= inversion (map \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (map \#(- 11 %) (reverse prime)))\\n            ;(\=\= inversion (map \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            ;(\=\= inversion (map \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "\\n(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            (\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (everyg \#(- 12 %) retrograde))\\n            (\=\= inversion (everyg \#(- 12 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            ;(\=\= retrograde (reverse prime))\\n            ;(\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            (\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime retrograde retrogradeinversion inversion])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            (\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime retrograde retrogradeinversion inversion])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            ;(\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime retrograde  ])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            ;(\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime retrograde])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            ;(\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))" "(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            ;(\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            ;(\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (everyg \#(- 11 %) retrograde))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (map \#(- 11 %) retrograde))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(range 11)" "(range 12)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (everyg \#(fd/+ (nth prime %) (nth retrograde %) 11) (range 12))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (\=\= retrogradeinversion (everyg \#(fd/+ (nth prime %) (nth retrograde %) 11) (range 12)))\\n            ;(\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            ;(\=\= retrogradeinversion (everyg \#(fd/+ (nth prime %) (nth retrograde %) 11) (range 12)))\\n            (\=\= inversion (everyg \#(- 11 %) prime))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            ;(\=\= retrogradeinversion (everyg \#(fd/+ (nth prime %) (nth retrograde %) 11) (range 12)))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            )))" "\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime retrograde inversion retrogradeinversion])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime retrograde])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime retrograde])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)" "\\n(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime retrograde)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)" "\\n(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            \\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (\=\= q prime retrograde))))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            \\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )(\=\= q prime retrograde)))\\n\\n(music-equation)\\n" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime retrograde)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q [prime retrograde])\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)\\n" "(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 12 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n\\n\\n(def prime_rhythm               [1 1 4 1 1 1 2 3 1 1 4 1 1]);(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn music-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(music-equation)\\n\\n(def prime               (first (music-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(everyg \#(fd/in % (fd/domain  JMC/C JMC/CD JMC/CDD JMC/CT JMC/DC JMC/DDC JMC/DDEN JMC/DDHN JMC/DDM JMC/DDQ JMC/DDQN JMC/DEN) prime))" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  JMC/C JMC/CD JMC/CDD JMC/CT JMC/DC JMC/DDC JMC/DDEN JMC/DDHN JMC/DDM JMC/DDQ JMC/DDQN JMC/DEN) rhythm-prime))\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 11) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain JMC/C JMC/CD JMC/CDD JMC/CT JMC/DC JMC/DDC JMC/DDEN JMC/DDHN JMC/DDM JMC/DDQ JMC/DDQN JMC/DEN)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 11) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 6 lvar)\\n        rhythm-retrograde (repeatedly 6 lvar)\\n        rhythm-inversion (repeatedly 6 lvar)\\n        rhythm-retrogradeinversion (repeatedly 6 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 4 8 12 16)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 16) (range 6))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" "\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 6 lvar)\\n        rhythm-retrograde (repeatedly 6 lvar)\\n        rhythm-inversion (repeatedly 6 lvar)\\n        rhythm-retrogradeinversion (repeatedly 6 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 4 8 12 16)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 17) (range 6))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n\\n\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 6 lvar)\\n        rhythm-retrograde (repeatedly 6 lvar)\\n        rhythm-inversion (repeatedly 6 lvar)\\n        rhythm-retrogradeinversion (repeatedly 6 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 4 8 12 16)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 16) (range 6))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n\\n\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 4 8 12 16)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 16) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 4 8 12 16)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 17) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 4 8 12 16)) rhythm-prime)\\n            ;(fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 17) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 4 8 12 16)) rhythm-prime)\\n            ;(fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 16) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n\\n\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 16) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 16) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" ";; Switching to serial-counterpoint.total-serial namespace" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n\\n\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 16) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 12)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 16) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(range 12)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) (nth rhythm-inversion %)) (range 12))\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n            \\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) (nth rhythm-inversion %)) (range 12))\\n            )))\\n\\n(rhythm-equation)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-inversion %) (nth rhythm-inversion %)) (range 12))\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n            \\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi 5 8 3)\\n            (membero pr 5 8 3)\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n            \\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth prime %) (nth retrograde %) pr) (range 12))\\n            \\n            (membero pi 5 8 3)\\n            (membero pr 5 8 3)\\n            )\\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi 5 8 3)\\n            (membero pr 5 8 3)\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi '(5 8 3))\\n            (membero pr '(5 8 3))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n            \\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth prime %) (nth retrograde %) pr) (range 12))\\n            \\n            (membero pi '(5 8 3))\\n            (membero pr '(5 8 3))\\n            \\n            )\\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi '(5 8 3))\\n            (membero pr '(5 8 3))\\n            \\n            )\\n            )))" "(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            (membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            (membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            ;(everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            ;(membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)\\n\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n            \\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth prime %) (nth retrograde %) pr) (range 12))\\n            \\n            (membero pi '(5 8 3))\\n            (membero pr '(5 8 3))\\n            \\n            )\\n            )))\\n\\n(row-equation)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            ;(everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            ;(membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pi]\\n            \\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-inversion %) pi) (range 12))\\n            ;(everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pi '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            ;(membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            ;(everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            ;(membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            ;(everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n            \\n            (membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            ;(membero pr '(1 2 3 4 5 6 7 8 9 10 11 12))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n             \\n            (membero pr (range 0 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n             \\n            (membero pr (range 3 24 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(range 3 24 2)" "(range 3 5 2)" "(range 3 12 2)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n             \\n            (membero pr (range 3 12 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n             \\n            (membero pr (range 3 16 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(range 3 16 2)" "\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n             \\n            (membero pr (range 3 13 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n             \\n            (membero pr (range 3 14 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) pr) (range 12))\\n             \\n            (membero pr (range 3 14 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-inver %) pr) (range 12))\\n             \\n            (membero pr (range 3 14 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-inversion %) pr) (range 12))\\n             \\n            (membero pr (range 3 14 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/- (nth rhythm-prime %) (nth rhythm-inversion %) pr) (range 12))\\n             \\n            (membero pr (range 0 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 2) pr) (range 12))\\n             \\n            (membero pr '(3 5 7 11))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 2) pr) (range 12)))\\n             \\n            (membero pr '(3 5 7 11))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 2) pr)) (range 12))\\n             \\n            (membero pr '(3 5 7 11))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 2)) p)r (range 10))\\n             \\n            (membero pr '(3 5 7 11))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 2)) pr) (range 10))\\n             \\n            (membero pr '(3 5 7 11))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 2)) pr) (range 11))\\n             \\n            (membero pr '(3 5 7 11))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 1)) pr) (range 11))\\n             \\n            (membero pr '(3 5 7 11))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 1)) pr) (range 11))\\n             \\n            (membero pr '(3 5 7 11))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 1)) pr) (range 11))\\n             \\n            (membero pr '(3 5 7 11 13))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(range 2 24 3)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 1)) pr) (range 11))\\n             \\n            (membero pr (range 3 24 2))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(range 3 24 2)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 1)) pr) (range 11))\\n             \\n            (membero pr (range 3 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 1)) pr) (range 11))\\n             \\n            (membero pr (range 0 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)\\n" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (+ % 1)) pr) (range 11))\\n             \\n            (membero pr (range 0 25))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde) pr) (range 12))\\n             \\n            (membero pr (range 0 25))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n             \\n            (membero pr (range 0 25))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-retrograde %) pr) (range 12))\\n             \\n            (membero pr (range 0 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) pr) (range 12))\\n             \\n            (membero pr (range 0 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion (inc %)) pr) (range 12))\\n             \\n            (membero pr (range 0 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion (inc %)) pr) (range 11))\\n             \\n            (membero pr (range 0 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [pr]\\n            \\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            (membero pr (range 0 24))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [row]\\n            \\n            ;(everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            (membero pr (concat rhythm-prime rhythm-retrograde rhythm-inversion rhythm-retrogradeinversion))\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [row]\\n            \\n            ;(everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            [(membero pr rhythm-prime)]\\n            [(membero pr rhythm-retrograde)]\\n            [(membero pr rhythm-inversion)]\\n            [(membero pr rhythm-retrogradeinversion)]\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [row]\\n            \\n            ;(everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            (membero pr rhythm-prime)\\n            (membero pr rhythm-retrograde)\\n            (membero pr rhythm-inversion)\\n            (membero pr rhythm-retrogradeinversion)\\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [row]\\n            \\n            (everyg \#(membero pr (nth rhythm-prime %) (nth rhythm-prime (inc %)) ) (range 11))\\n          \\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;(everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            \\n           ; )\\n            )))\\n\\n(rhythm-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n            \\n            (fresh [pi pr]\\n            \\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) pi) (range 12))\\n            (everyg \#(fd/+ (nth prime %) (nth retrograde %) pr) (range 12))\\n            \\n            (membero pi '(5 8 3))\\n            (membero pr '(5 8 3))\\n            \\n            )\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n\\n            )))\\n\\n(row-equation)" "\\n(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            (everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            ;(everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(membero % prime_rhythm) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            ;(everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            ;(everyg \#(fd/- (nth prime %) (nth inversion %) (nth inversion %)) (range 12))\\n\\n            )))\\n\\n(row-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;(everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            \\n           ; )\\n            )))\\n\\n(rhythm-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (nth prime 0) 7) \\n            \\n            ;(everyg \#(fd/ (nth prime %) (nth prime (inc %)) ) (range 11))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) 7) \\n            (fd/\=\= (last prime) 5) \\n            \\n            ;(everyg \#(fd/ (nth prime %) (nth prime (inc %)) ) (range 11))\\n\\n            )))\\n\\n(row-equation)" "(range 11)" "(range 1 11)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) 7) \\n            (fd/\=\= (last prime) 5) \\n            \\n            (everyg \#(fd/< (nth prime %) (nth prime (inc %))) (range 1 11))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) 7) \\n            (fd/\=\= (last prime) 5) \\n            \\n            (everyg \#(fd/> (nth prime %) (nth prime (inc %))) (range 1 11))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) 7) \\n            (fd/\=\= (last prime) 5) \\n            \\n            (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) 3) (range 1 11))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) 7) \\n            (fd/\=\= (last prime) 5) \\n            \\n            (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) 1) (range 1 11))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  []\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) 7) \\n            (fd/\=\= (last prime) 5) \\n            \\n            (everyg \#(fd/- (nth prime %) (nth prime (inc %)) 1) (range 1 11))\\n\\n            )))\\n\\n(row-equation)" "\\n(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime (inc %)) 1) (nth prime %) interval (range 1 11)))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 1 11)))\\n\\n            )))\\n\\n(row-equation)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 1 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) interval) (range 1 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n            ;       (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) interval) (range 1 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) interval) (range 1 10)))\\n\\n            )))\\n\\n(row-equation 3 9)" "\\n(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) interval) (range 2 10)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(range 0 24)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) interval) (range 1 11))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) interval) (range 0 11))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) interval) (range 12))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/+ (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/\!\= (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/\=\=  interval (- (nth prime %) (nth prime (inc %)))) (range 11))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 0 25)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 0 12)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 0 6)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(3 5 7 8)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(3 5 7 8 9)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(3 5 7 8 9 12)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(3 5 7 8 11 9 12)))\\n\\n            )))\\n\\n(row-equation 3 9)\\n" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(0 1 2 3 4 5 6 7 8 9 10 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(0 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 5 6 7 8 9 10 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "\\n(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1 2 3 4 5 6 7 8 9 10 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "\\n(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(  2 3 4 5 6 7 8 9 10 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1  3 4 5 6 7 8 9 10 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1  3  5 6 7 8 9 10 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1  3  5  7  9  11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1    5  7  9  11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1  5  7  11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1   7  11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1     11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 1    )))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 11)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 12)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 13)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '( 0)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;(everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            \\n           ; )\\n            )))\\n\\n(rhythm-equation)\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(1)))\\n\\n            )))\\n\\n(row-equation 3 9)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval '(1)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 36))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 9)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n                   (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain  0 1 2 3 4 5 6 7 8 9 10 11)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1)" "(range 48)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (range 48)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (range 48)) prime))\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (rage 48))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range 12))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1)" "(count prime)" "\\n(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (rage 48))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range (count prime))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1)" "(defn row-equation \\n  [start  end]\\n  (let [prime (repeatedly 12 lvar)\\n        retrograde (repeatedly 12 lvar)\\n        inversion (repeatedly 12 lvar)\\n        retrogradeinversion (repeatedly 12 lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (rage 48))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range (count prime)))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1)" "(range (count prime))" "(count prime)" "(defn row-equation \\n  [start  end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (rage limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range (count prime)))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 48)" "(defn row-equation \\n  [start  end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (rage limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 48)" "(defn row-equation \\n  [start  end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (rage limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 48)" "\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero  (rage limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))" "\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero (range limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 48)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero % (range limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 48)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(membero % (range limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 48)" ";; Switching to serial-counterpoint.total-serial namespace" "(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero (range limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 48)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero (range limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (membero (range prime limit))))\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(membero (range prime limit)))\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(membero % (range prime limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(membero % (range 0 limit) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(membero % (range 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" ";; Switching to serial-counterpoint.total-serial namespace" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(repeatedly (inc 1))" "(repeat 1 1)" "(repeat 1 (inc 1))" "(range 0 limit)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain (take limit (range 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain (take limit (range 0 limit)))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain (range 0 limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/member? (range 0 limit))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/in  (fd/domain (range 0 limit)))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/in % (fd/domain (range 0 limit)))) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (range 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(membero % (range 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" ";; Switching to serial-counterpoint.total-serial namespace" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(membero % (range 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" ";; Switching to serial-counterpoint.total-serial namespace" "(apply (range 0 12))" "(take 12 (range 0 12))" "(apply take 12 (range 0 12))" "(apply range 0 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            ;(fd/\=\= (first prime) start) \\n            ;(fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 24)" ";; Switching to serial-counterpoint.total-serial namespace" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 24)" ";; Switching to serial-counterpoint.total-serial namespace" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        ;retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            ;(\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        ;retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            ;(\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 3 1 13)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        ;retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            ;(\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 0 1 13)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        ;retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            ;(\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 0 1 16)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        ;retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 0 1 12)" "\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 0 1 12)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 0 1 13)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 0 1 14)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n             ;      (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range 11))\\n              ;     (membero interval (range 36)))\\n\\n            )))\\n\\n(row-equation 0 1 15)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limi))\\n                   (membero interval (range 3 limit 2)))\\n\\n            )))\\n\\n(row-equation 0 1 15)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limit))\\n                   (membero interval (range 3 limit 2)))\\n\\n            )))\\n\\n(row-equation 0 1 15)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            (fresh [interval]            \\n                   (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limit))\\n                   (membero interval (range 0 limit)))\\n\\n            )))\\n\\n(row-equation 0 1 15)" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n            ;       (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limit))\\n             ;      (membero interval (range 0 limit)))\\n\\n            )))\\n\\n(row-equation 0 1 15)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;(everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            \\n           ; )\\n            )))\\n\\n(rhythm-equation)\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [row]\\n            \\n                   (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) pr) (range 11))\\n             \\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [row]\\n            \\n                   (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) row) (range 11))\\n             \\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [row]\\n            \\n                   (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) row) (range 12))\\n             \\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            (fresh [row]\\n            \\n                   (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) row) (range 11))\\n             \\n            \\n            )\\n            )))\\n\\n(rhythm-equation)" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;       (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) row) (range 11))\\n             \\n            \\n           ;)\\n            )))\\n\\n(rhythm-equation)" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;       (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) row) (range 11))\\n             \\n            \\n           ;)\\n            )))\\n\\n(rhythm-equation)\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n            ;       (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limit))\\n             ;      (membero interval (range 0 limit)))\\n\\n            )))\\n\\n(row-equation 0 1 24)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;       (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) row) (range 11))\\n             \\n            \\n           ;)\\n            )))\\n\\n(rhythm-equation)\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n            ;       (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limit))\\n             ;      (membero interval (range 0 limit)))\\n\\n            )))\\n\\n(row-equation 0 1 12)\\n\\n(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n            ;       (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limit))\\n             ;      (membero interval (range 0 limit)))\\n\\n            )))\\n\\n(row-equation 0 1 12)" "(def prime               (first (row-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n" " (first (row-equation))" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;       (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) row) (range 11))\\n             \\n            \\n           ;)\\n            )))\\n\\n;(rhythm-equation)\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n            ;       (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limit))\\n             ;      (membero interval (range 0 limit)))\\n\\n            )))\\n\\n;(row-equation 0 1 12)\\n\\n(def prime               (first (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            ;(fresh [row]\\n            \\n            ;       (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-prime (inc %)) row) (range 11))\\n             \\n            \\n           ;)\\n            )))\\n\\n;(rhythm-equation)\\n\\n(def prime_rhythm               (first (rhythm-equation)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n            \\n            ;(fresh [interval]            \\n            ;       (everyg \#(fd/- (nth prime %) (nth prime (inc %)) interval) (range limit))\\n             ;      (membero interval (range 0 limit)))\\n\\n            )))\\n\\n;(row-equation 0 1 12)\\n\\n(def prime               (first (row-equation 0 1 24)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 8)))) ;(first (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 9 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 9 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (first (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 16)))) ;(first (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 17 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 17 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 1 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (first (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 1 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (take 12 (repeatedly \#(rand-int 16)))) ;(first (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 17 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 17 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 12 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 12 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 17 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 17 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 12 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 12 lvar)\\n        rhythm-retrograde (repeatedly 12 lvar)\\n        rhythm-inversion (repeatedly 12 lvar)\\n        rhythm-retrogradeinversion (repeatedly 12 lvar)]\\n    (run 12 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9 10 11 12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 13) (range 12))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 12 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run 7 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 8) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 12 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run 7 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 6) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))" "last (rhythm-equation))" "(last (rhythm-equation))" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run 7 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 6) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 12 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (inc index))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (inc index))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run 7 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 6) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 12 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7)))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n" "(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7)))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run 7 [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 6) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc 12 [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run (rand-int 12) [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 6) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation 0 1 12)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run (rand-int 12) [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 6) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation (rand-int 12) (rand-int 12))));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run (rand-int 12) [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            ;(fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 6) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation (rand-int 12) (rand-int 12))));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run (rand-int 12) [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation (rand-int 12) (rand-int 12))));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run (rand-int 12) [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            ;(fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 7))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation (rand-int 12) (rand-int 12))));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(defn rhythm-equation \\n  []\\n  (let [rhythm-prime (repeatedly 7 lvar)\\n        rhythm-retrograde (repeatedly 7 lvar)\\n        rhythm-inversion (repeatedly 7 lvar)\\n        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n    (run (rand-int 12) [q]\\n            (\=\= q rhythm-prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n            (fd/distinct rhythm-prime)                                                       \\n            (\=\= rhythm-retrograde (reverse rhythm-prime))\\n            (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 3))\\n            (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n            )))\\n\\n(def prime_rhythm               (last (rhythm-equation)))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (last (row-equation (rand-int 12) (rand-int 12))));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n;(defn rhythm-equation \\n; []\\n;  (let [rhythm-prime (repeatedly 7 lvar)\\n;        rhythm-retrograde (repeatedly 7 lvar)\\n;        rhythm-inversion (repeatedly 7 lvar)\\n;        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n ;   (run (rand-int 12) [q]\\n ;           (\=\= q rhythm-prime)\\n ;           (distribute q \:\:l/ff)\\n ;           (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n ;           (fd/distinct rhythm-prime)                                                       \\n ;           (\=\= rhythm-retrograde (reverse rhythm-prime))\\n ;           (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 3))\\n ;           (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n ;           )))\\n\\n(def prime_rhythm               '(1 3 2   2 1 3   2 3 1   3 1 2))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               '(43  44  46  48  50  51  53  55  56  58  60  62  63  65  67  68  70  72  74  75));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n;(defn rhythm-equation \\n; []\\n;  (let [rhythm-prime (repeatedly 7 lvar)\\n;        rhythm-retrograde (repeatedly 7 lvar)\\n;        rhythm-inversion (repeatedly 7 lvar)\\n;        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n ;   (run (rand-int 12) [q]\\n ;           (\=\= q rhythm-prime)\\n ;           (distribute q \:\:l/ff)\\n ;           (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n ;           (fd/distinct rhythm-prime)                                                       \\n ;           (\=\= rhythm-retrograde (reverse rhythm-prime))\\n ;           (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 3))\\n ;           (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n ;           )))\\n\\n(def prime_rhythm               '(1 3 2   2 1 3   2 3 1   3 1 2))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (map \#(mod % 12) '(43  44  46  48  50  51  53  55  56  58  60  62  63  65  67  68  70  72  74  75)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 7))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 7))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(map \#(mod % 12) '(43  44  46  48  50  51  53  55  56  58  60  62  63  65  67  68  70  72  74  75))" ";; Switching to serial-counterpoint.total-serial namespace" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n;(defn rhythm-equation \\n; []\\n;  (let [rhythm-prime (repeatedly 7 lvar)\\n;        rhythm-retrograde (repeatedly 7 lvar)\\n;        rhythm-inversion (repeatedly 7 lvar)\\n;        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n ;   (run (rand-int 12) [q]\\n ;           (\=\= q rhythm-prime)\\n ;           (distribute q \:\:l/ff)\\n ;           (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n ;           (fd/distinct rhythm-prime)                                                       \\n ;           (\=\= rhythm-retrograde (reverse rhythm-prime))\\n ;           (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 3))\\n ;           (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n ;           )))\\n\\n(def prime_rhythm               '(1 3 2   2 1 3   2 3 1   3 1 2))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (map \#(mod % 12) '(43  44  46  48  50  51  53  55  56  58  60  62  63  65  67  68  70  72  74  75)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 12))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 12))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 12))))\\n\\n    (def index 0)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 12))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n;(defn rhythm-equation \\n; []\\n;  (let [rhythm-prime (repeatedly 7 lvar)\\n;        rhythm-retrograde (repeatedly 7 lvar)\\n;        rhythm-inversion (repeatedly 7 lvar)\\n;        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n ;   (run (rand-int 12) [q]\\n ;           (\=\= q rhythm-prime)\\n ;           (distribute q \:\:l/ff)\\n ;           (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n ;           (fd/distinct rhythm-prime)                                                       \\n ;           (\=\= rhythm-retrograde (reverse rhythm-prime))\\n ;           (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 3))\\n ;           (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n ;           )))\\n\\n(def prime_rhythm               '(1 3 2   2 1 3   2 3 1   3 1 2))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (map \#(mod % 12) '(43  44  46  48  50  51  53  55  56  58  60  62  63  65  67  68  70  72  74  75)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 12))))\\n\\n    (def index 12)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 12))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 12))))\\n\\n    (def index 12)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 12))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n;(defn rhythm-equation \\n; []\\n;  (let [rhythm-prime (repeatedly 7 lvar)\\n;        rhythm-retrograde (repeatedly 7 lvar)\\n;        rhythm-inversion (repeatedly 7 lvar)\\n;        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n ;   (run (rand-int 12) [q]\\n ;           (\=\= q rhythm-prime)\\n ;           (distribute q \:\:l/ff)\\n ;           (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n ;           (fd/distinct rhythm-prime)                                                       \\n ;           (\=\= rhythm-retrograde (reverse rhythm-prime))\\n ;           (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 3))\\n ;           (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n ;           )))\\n\\n(def prime_rhythm               '(1 3 2   2 1 3   2 3 1   3 1 2))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (map \#(mod % 12) '(43  44  46  48  50  51  53  55  56  58  60  62  63  65  67  68  70  72  74  75)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 12))))\\n\\n    (def index 11)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 12))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 12))))\\n\\n    (def index 11)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 12))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(map \#(mod % 12) '(43  44  46  48  50  51  53  55  56  58  60  62  63  65  67  68  70  72  74  75))" "(ns serial-counterpoint.total-serial\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n;(defn rhythm-equation \\n; []\\n;  (let [rhythm-prime (repeatedly 7 lvar)\\n;        rhythm-retrograde (repeatedly 7 lvar)\\n;        rhythm-inversion (repeatedly 7 lvar)\\n;        rhythm-retrogradeinversion (repeatedly 7 lvar)]\\n ;   (run (rand-int 12) [q]\\n ;           (\=\= q rhythm-prime)\\n ;           (distribute q \:\:l/ff)\\n ;           (everyg \#(fd/in % (fd/domain 1 2 3 4  6  8  12)) rhythm-prime)\\n ;           (fd/distinct rhythm-prime)                                                       \\n ;           (\=\= rhythm-retrograde (reverse rhythm-prime))\\n ;           (everyg \#(fd/+ (nth rhythm-prime %) (nth rhythm-inversion %) 4) (range 3))\\n ;           (\=\= rhythm-retrogradeinversion (reverse rhythm-inversion))\\n ;           )))\\n\\n(def prime_rhythm               '(1 3 2   2 1 3   2 3 1   3 1 2))\\n(def retrograde_rhythm          (reverse prime_rhythm))\\n(def retrogradeinversion_rhythm (map \#(- 12 %) retrograde_rhythm))\\n(def inversion_rhythm           (map \#(- 12 %) prime_rhythm))\\n\\n(defn row-equation \\n  [start end limit]\\n  (let [prime (repeatedly limit lvar)\\n        retrograde (repeatedly limit lvar)\\n        inversion (repeatedly limit lvar)\\n        retrogradeinversion (repeatedly limit lvar)\\n        ]\\n    (run-nc (rand-int 12) [q]\\n            (\=\= q prime)\\n            (distribute q \:\:l/ff)\\n            (everyg \#(fd/in % (fd/interval 0 limit)) prime)\\n            (fd/distinct prime)                                                       \\n            (\=\= retrograde (reverse prime))\\n            (everyg \#(fd/+ (nth prime %) (nth inversion %) 11) (range limit))\\n            (\=\= retrogradeinversion (reverse inversion))\\n            \\n            (fd/\=\= (first prime) start) \\n            (fd/\=\= (last prime) end) \\n          \\n            )))\\n\\n(def prime               (map \#(mod % 12) '(43  44  46  48  50  51  53  55  56  58  60  62  63  65  67  68  70  72  74  75)));(take 12 (repeatedly \#(rand-int 8))))\\n(def retrograde          (reverse prime))\\n(def retrogradeinversion (map \#(- 12 %) retrograde))\\n(def inversion           (map \#(- 12 %) prime))\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score \\"Serial Counterpoint - Total Serial\\")\\n        piano-part-i   (new Part \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Counterpoint i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Counterpoint ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Counterpoint iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Counterpoint iv\\" 0.0)]            \\n    \\n    (doseq [seed   (range 1 24)]\\n    \\n        (def rnd-i   (rand-int seed))\\n        (def rnd-ii  (rand-int seed))\\n        (def rnd-iii (rand-int seed))\\n        (def rnd-vi  (rand-int seed))\\n      \\n    (def index 0)\\n    \\n    (doseq [note prime]\\n      (let [rhythm (nth prime_rhythm index)]              \\n        (.addNote phrase-i (new Note (+ note 65 rnd-i) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 12))))\\n\\n    (def index 11)\\n \\n    (doseq [note retrograde]\\n      (let [rhythm (nth retrograde_rhythm index)]   \\n        (.addNote phrase-ii (new Note (+ note 55 rnd-ii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 12))))\\n\\n    (def index 0)\\n \\n    (doseq [note retrogradeinversion]\\n      (let [rhythm (nth retrogradeinversion_rhythm index)]   \\n        (.addNote phrase-iii (new Note (+ note 45 rnd-iii) (* JMC/SIXTEENTH_NOTE rhythm))) \\n        (def index (mod (inc index) 12))))\\n\\n    (def index 11)\\n \\n    (doseq [note inversion]\\n      (let [rhythm (nth inversion_rhythm index)]   \\n        (.addNote phrase-iv (new Note (+ note 35 rnd-vi) (* JMC/SIXTEENTH_NOTE rhythm)))\\n        (def index (mod (inc index) 12))))\\n    )\\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/total-serial\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(clojure.core/ns serial-counterpoint.algortihmic-composition)\\n(ns serial-counterpoint.algortihmic-composition\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def voice-i   [[1] [1]])\\n(def voice-ii  [[1] [1]])\\n(def voice-iii [[1] [1]])\\n(def voice-iv  [[1] [1]])\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score  \\"Algorithmic Composition - Template\\")\\n        piano-part-i   (new Part   \\"Piano i\\" JMC/PIANO 0) \\n        piano-part-ii  (new Part   \\"Piano ii\\" JMC/PIANO 0) \\n        piano-part-iii (new Part   \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part   \\"Piano iv\\" JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Phrase i\\" 0.0)\\n        phrase-ii      (new Phrase \\"Phrase ii\\" 0.0)\\n        phrase-iii     (new Phrase \\"Phrase iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Phrase iv\\" 0.0)]            \\n    \\n    (doseq [note voice-i]\\n      (let [pitch  (first note)\\n            rhythm (last note)]              \\n        (.addNote phrase-i   (new Note (+ pitch 75) (* JMC/SIXTEENTH_NOTE rhythm))))) \\n    \\n    (doseq [note voice-ii]\\n      (let [pitch  (first note)\\n            rhythm (last note)]              \\n        (.addNote phrase-ii  (new Note (+ pitch 65) (* JMC/SIXTEENTH_NOTE rhythm))))) \\n    \\n    (doseq [note voice-iii]\\n      (let [pitch  (first note)\\n            rhythm (last note)]              \\n        (.addNote phrase-iii (new Note (+ pitch 55) (* JMC/SIXTEENTH_NOTE rhythm))))) \\n        \\n    (doseq [note voice-iv]\\n      (let [pitch  (first note)\\n            rhythm (last note)]              \\n        (.addNote phrase-iv  (new Note (+ pitch 45) (* JMC/SIXTEENTH_NOTE rhythm))))) \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/algorithmic-composition-tamplate\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n\\n(clojure.core/ns serial-counterpoint.total-serial)" "JMC/SIXTEENTH_NOTE" ";; Switching to mx.clojure.mx-template namespace" "(ns mx.clojure.mx-template\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def voice-i   [[1] [1] [64]])\\n(def voice-ii  [[1] [1] [64]])\\n(def voice-iii [[1] [1] [64]])\\n(def voice-iv  [[1] [1] [64]])\\n\\n(defn make-music\\n  []\\n  (let [score          (new Score  \\"Algorithmic Composition - Template\\")\\n        piano-part-i   (new Part   \\"Piano i\\"   JMC/PIANO 0) \\n        piano-part-ii  (new Part   \\"Piano ii\\"  JMC/PIANO 0) \\n        piano-part-iii (new Part   \\"Piano iii\\" JMC/PIANO 0) \\n        piano-part-iv  (new Part   \\"Piano iv\\"  JMC/PIANO 0) \\n        phrase-i       (new Phrase \\"Phrase i\\"   0.0)\\n        phrase-ii      (new Phrase \\"Phrase ii\\"  0.0)\\n        phrase-iii     (new Phrase \\"Phrase iii\\" 0.0)\\n        phrase-iv      (new Phrase \\"Phrase iv\\"  0.0)]            \\n    \\n    (doseq [note voice-i]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-i   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-ii]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-ii  (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-iii]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-iii (new Note pitch rhythm velocity)))) \\n        \\n    (doseq [note voice-iv]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-iv  (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/algorithmic-composition-tamplate\\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n" "(def extractor (new Extractor))" "(def extractor (new mx.java.Extractor))" "(extractor \\"/Users/maxtuno/Downloads/schoenberg_sechs_klavierstucke_19_1_(c)simonetto.mid\\")" "(.exec extractor \\"/Users/maxtuno/Downloads/schoenberg_sechs_klavierstucke_19_1_(c)simonetto.mid\\")" "(.mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/schoenberg_sechs_klavierstucke_19_1_(c)simonetto.mid\\")" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/schoenberg_sechs_klavierstucke_19_1_(c)simonetto.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/schoenberg_sechs_klavierstucke_19_1_(c)simonetto.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/schoenberg_sechs_klavierstucke_19_1_(c)simonetto.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/sSamuel Barber - Adagio For Strings Opus 11 - mx.mid\\")" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Samuel Barber - Adagio For Strings Opus 11 - mx.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Samuel Barber - Adagio For Strings Opus 11 - mx.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Samuel Barber - Adagio For Strings Opus 11 - mx.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Samuel Barber - Adagio For Strings Opus 11 - mx.mid\\")" "(clojure.core/ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11)\\n(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Samuel Barber - Adagio For Strings Opus 11 - Mx\\")\\n\\n(def voice-1 [70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52])\\n(def voice-2 [66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64])\\n(def voice-3 [61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76])\\n(def voice-4 [39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54])\\n(def voice-5 [27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title)\\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/PIANO 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/PIANO 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/PIANO 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/PIANO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/PIANO 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n(clojure.core/ns mx.clojure.mx-template)" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Samuel Barber - Adagio For Strings Opus 11 - Mx\\")\\n\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title)\\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/PIANO 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/PIANO 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/PIANO 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/PIANO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/PIANO 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-i phrase-i)\\n    (.addPhrase piano-part-ii phrase-ii)\\n    (.addPhrase piano-part-iii phrase-iii)\\n    (.addPhrase piano-part-iv phrase-iv)\\n    \\n    (.addPart   score piano-part-i)\\n    (.addPart   score piano-part-ii)\\n    (.addPart   score piano-part-iii)\\n    (.addPart   score piano-part-iv)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Samuel Barber - Adagio For Strings Opus 11 - Mx\\")\\n\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title)\\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/PIANO 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/PIANO 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/PIANO 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/PIANO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/PIANO 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Samuel Barber - Adagio For Strings Opus 11 - Mx\\")\\n\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title 90)\\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Samuel Barber - Adagio For Strings Opus 11 - Mx\\")\\n\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title 90.0)\\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/VIOLONCELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Samuel Barber - Adagio For Strings Opus 11 - Mx\\")\\n\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title 90.0)\\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/VIOLLONCELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Samuel Barber - Adagio For Strings Opus 11 - Mx\\")\\n\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title 90.0)\\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Samuel Barber - Adagio For Strings Opus 11 - Mx\\")\\n\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title 120.0)\\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Samuel Barber - Adagio For Strings Opus 11 - mx.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Samuel Barber - Adagio For Strings Opus 11 - mx.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Samuel Barber - Adagio For Strings Opus 11 - mx.mid\\")" "(clojure.core/ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11)\\n(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Mx\\")\\n(def tempo 60.0)\\n(def key-signature 0)\\n(def time-signature 4/4)\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score time-signature)\\n    (.setKeySignature score time-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n(clojure.core/ns mx.clojure.mx-template)" "(double time-signature)" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Mx\\")\\n(def tempo 60.0)\\n(def key-signature 0)\\n(def time-signature 4/4)\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (double time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Mx\\")\\n(def tempo 60.0)\\n(def key-signature 0)\\n(def time-signature 4/4)\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (numerator time-signature) (denominator time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Mx\\")\\n(def tempo 60.0)\\n(def key-signature 0)\\n(def time-signature 4/4)\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (long (numerator time-signature)) (long (denominator time-signature)))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(numerator time-signature)" "(first time-signature)" "(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def title \\"Mx\\")\\n(def tempo 60.0)\\n(def key-signature 0)\\n(def time-signature [4 4])\\n(def voice-1 [[70, 9.013020833333334, 34][69, 1.1171875, 35][-2147483648, 0.8828124999999964, 0][72, 1.0963541666666667, 37][-2147483648, 0.9036458333333321, 0][70, 1.1588541666666667, 40][-2147483648, 0.8203124999999964, 0][70, 1.1380208333333333, 43][-2147483648, 0.8619791666666679, 0][73, 1.1588541666666667, 50][-2147483648, 0.8619791666666679, 0][72, 1.1171875, 50][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 53][-2147483648, 0.9244791666666714, 0][75, 1.1380208333333333, 57][-2147483648, 5.882812500000021, 0][72, 5.033854166666667, 58][70, 4.908854166666667, 53][70, 1.0755208333333333, 49][-2147483648, 0.9244791666666572, 0][73, 1.1380208333333333, 47][-2147483648, 0.8619791666666643, 0][68, 1.1380208333333333, 43][-2147483648, 0.8411458333333357, 0][65, 1.1588541666666667, 44][-2147483648, 0.8619791666666714, 0][61, 1.1380208333333333, 46][-2147483648, 0.8619791666666643, 0][61, 1.1171875, 42][-2147483648, 0.8828125, 0][65, 1.1171875, 45][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8828125, 0][68, 1.1171875, 54][-2147483648, 0.8619791666666714, 0][66, 1.1796875, 43][-2147483648, 5.841145833333329, 0][70, 5.013020833333333, 39][69, 1.0755208333333333, 41][-2147483648, 0.8906250000000142, 0][72, 1.1171875, 49][-2147483648, 0.9036458333333286, 0][70, 1.0546875, 50][72, 1.0963541666666667, 50][-2147483648, 0.828125, 0][72, 1.0755208333333333, 50][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333144, 0][72, 1.0963541666666667, 53][-2147483648, 0.9036458333333286, 0][72, 1.0546875, 53][73, 1.0963541666666667, 49][-2147483648, 0.8489583333333286, 0][72, 1.1588541666666667, 50][-2147483648, 0.8411458333333286, 0][78, 5.971354166666667, 54][77, 6.033854166666667, 60][84, 2.0130208333333335, 59][82, 5.013020833333333, 52][70, 1.0963541666666667, 51][-2147483648, 0.8645833333333286, 0][72, 1.0755208333333333, 49][68, 2.9505208333333335, 47][68, 1.0755208333333333, 46][-2147483648, 1.8567708333333428, 0][72, 2.0130208333333335, 53][73, 3.1380208333333335, 64][-2147483648, 0.8619791666666856, 0][70, 1.1171875, 43][-2147483648, 0.8828125, 0][70, 2.9505208333333335, 41][70, 1.1380208333333333, 41][-2147483648, 0.8828125, 0][70, 0.9921875, 41][71, 1.1171875, 42][-2147483648, 0.8828125, 0][68, 1.0755208333333333, 41][66, 1.0963541666666667, 41][-2147483648, 1.8281250000000284, 0][68, 1.0963541666666667, 43][-2147483648, 0.8828125, 0][68, 3.0963541666666665, 49][-2147483648, 0.9244791666666572, 0][65, 1.0546875, 41][66, 1.1171875, 40][-2147483648, 1.8072916666666572, 0][66, 4.950520833333333, 40][66, 1.0963541666666667, 41][-2147483648, 0.9036458333333144, 0][68, 1.0963541666666667, 49][-2147483648, 5.882812500000057, 0][70, 2.1588541666666665, 41][-2147483648, 2.8619791666666856, 0][69, 0.9713541666666666, 53][70, 4.096354166666667, 58][72, 2.0963541666666665, 64][-2147483648, 1.8359375000000284, 0][73, 2.1171875, 72][-2147483648, 0.8828125, 0][73, 0.9505208333333334, 69][75, 4.950520833333333, 66][75, 1.0546875, 64][74, 1.0546875, 58][-2147483648, 0.890625, 0][74, 6.950520833333333, 64][74, 1.0755208333333333, 56][-2147483648, 0.9453125, 0][77, 1.0546875, 49][75, 1.0755208333333333, 43][-2147483648, 0.8489583333333144, 0][71, 3.0755208333333335, 41][-2147483648, 0.9036458333333428, 0][70, 1.1171875, 43][-2147483648, 0.8828124999999716, 0][68, 1.0963541666666667, 40][70, 1.0963541666666667, 43][-2147483648, 0.807291666666714, 0][70, 1.1171875, 49][-2147483648, 0.9036458333333428, 0][73, 1.0963541666666667, 50][-2147483648, 6.882812500000028, 0][71, 2.9296875, 56][70, 1.9505208333333333, 58][68, 4.971354166666667, 61][66, 1.0546875, 53][65, 1.0338541666666667, 49][-2147483648, 0.9322916666666856, 0][65, 2.9713541666666665, 45][-2147483648, 87.00781249999997, 0][63, 1.1822916666666667, 117][-2147483648, 0.8385416666665719, 0][75, 6.9921875, 56][74, 0.9921875, 45][75, 1.0338541666666667, 43][77, 1.0546875, 46][-2147483648, 0.8906250000000568, 0][75, 1.0755208333333333, 56][77, 1.0755208333333333, 53][-2147483648, 0.8697916666667993, 0][77, 1.0130208333333333, 41][78, 0.9921875, 46][75, 1.0755208333333333, 49][-2147483648, 0.8906250000000568, 0][78, 1.0755208333333333, 56][77, 0.9921875, 56][78, 0.9921875, 53][80, 1.0338541666666667, 56][-2147483648, 9.927083333333258, 0][77, 3.9921875, 64][75, 5.013020833333333, 61][78, 1.1380208333333333, 64][-2147483648, 0.8567708333334281, 0][78, 0.9921875, 58][77, 6.013020833333333, 56][82, 2.1171875, 53][-2147483648, 5.877604166666686, 0][85, 1.9921875, 61][84, 2.0546875, 64][89, 1.9921875, 61][85, 3.0130208333333335, 64][-2147483648, 1.9401041666666288, 0][85, 1.1380208333333333, 69][-2147483648, 0.8411458333333712, 0][89, 1.1171875, 74][-2147483648, 0.9036458333333144, 0][87, 1.0130208333333333, 78][89, 1.1380208333333333, 78][-2147483648, 0.828125, 0][89, 1.0963541666666667, 77][90, 1.0963541666666667, 74][-2147483648, 0.7864583333333144, 0][89, 1.1380208333333333, 77][-2147483648, 0.9036458333334281, 0][89, 1.1171875, 77][-2147483648, 0.8411458333332575, 0][92, 1.1380208333333333, 78][-2147483648, 11.8828125, 0][94, 4.075520833333333, 78][92, 11.9921875, 78][-2147483648, 4.953125, 0][70, 1.9921875, 46][68, 5.971354166666667, 41][68, 2.0130208333333335, 39][66, 5.9921875, 40][71, 2.0338541666666665, 43][64, 4.013020833333333, 46][65, 3.9921875, 49][-2147483648, 1.934895833333428, 0][70, 5.0546875, 50][69, 1.0755208333333333, 41][-2147483648, 0.8697916666667425, 0][72, 1.0963541666666667, 46][69, 1.1588541666666667, 42][-2147483648, 0.7447916666666288, 0][72, 1.0755208333333333, 41][70, 1.0963541666666667, 43][-2147483648, 0.828125, 0][73, 1.1171875, 43][-2147483648, 0.8828125, 0][72, 1.1171875, 46][-2147483648, 0.9036458333333144, 0][72, 1.0338541666666667, 53][73, 1.0546875, 56][-2147483648, 0.8906250000000568, 0][72, 5.971354166666667, 66][-2147483648, 1.0286458333332575, 0][72, 4.075520833333333, 72][70, 4.971354166666667, 56][73, 1.0963541666666667, 41][-2147483648, 0.8567708333334849, 0][70, 1.1171875, 46][-2147483648, 0.8619791666667425, 0][73, 1.0963541666666667, 56][75, 1.0755208333333333, 61][-2147483648, 0.8489583333332575, 0][78, 1.1380208333333333, 58][-2147483648, 0.8619791666666288, 0][75, 1.0963541666666667, 64][-2147483648, 0.9244791666666288, 0][72, 1.0755208333333333, 50][-2147483648, 0.9244791666666288, 0][68, 1.0755208333333333, 41][-2147483648, 0.9036458333333712, 0][70, 1.0963541666666667, 41][68, 1.1171875, 41][-2147483648, 0.7864583333334849, 0][66, 1.0963541666666667, 41][-2147483648, 4.9036458333332575, 0][70, 5.013020833333333, 46][69, 1.0963541666666667, 43][-2147483648, 0.890625, 0][72, 1.0755208333333333, 41][69, 7.013020833333333, 41][-2147483648, 0.9114583333332575, 0][58, 6.013020833333333, 63][57, 2.0130208333333335, 65][58, 2.0130208333333335, 61][60, 2.0130208333333335, 60][57, 16.013020833333332, 59][70, 1.1380208333333333, 36][-2147483648, 0.8828125, 0][69, 1.1171875, 39][-2147483648, 0.8411458333333321, 0][72, 1.1796875, 42][-2147483648, 0.8411458333333321, 0][72, 1.0963541666666667, 46][-2147483648, 0.9244791666666679, 0][70, 1.1588541666666667, 51][-2147483648, 0.8411458333333321, 0][73, 1.1380208333333333, 53][-2147483648, 0.8203125, 0][73, 1.1588541666666667, 58][-2147483648, 0.8828125000000142, 0][72, 5.203125, 59][-2147483648, 11.776041666666693, 0][72, 1.1380208333333333, 46][-2147483648, 0.9036458333333286, 0][70, 1.1171875, 46][-2147483648, 0.8411458333333357, 0][66, 1.1171875, 46][-2147483648, 0.9036458333333357, 0][63, 1.1588541666666667, 44][-2147483648, 0.8411458333333357, 0][60, 1.0963541666666667, 44][-2147483648, 0.9036458333333357, 0][63, 1.1171875, 43][-2147483648, 0.8828125, 0][66, 1.1588541666666667, 49][-2147483648, 0.8203125, 0][70, 1.1380208333333333, 55][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 50][-2147483648, 0.9036458333333286, 0][65, 3.9921875, 45][-2147483648, 8.007812500000014, 0][70, 1.0546875, 43][-2147483648, 0.9453124999999858, 0][69, 1.0963541666666667, 50][-2147483648, 1.9036458333333286, 0][70, 1.1171875, 56][-2147483648, 1.8411458333333286, 0][70, 1.1171875, 49][-2147483648, 0.9244791666666572, 0][73, 1.1171875, 50][-2147483648, 1.8828125, 0][75, 1.0546875, 49][-2147483648, 0.9453125, 0][78, 0.9713541666666666, 46][-2147483648, 20.02864583333333, 0][73, 1.0963541666666667, 50][-2147483648, 4.861979166666657, 0][70, 2.1171875, 47][-2147483648, 4.9453125, 0][72, 1.0130208333333333, 50][-2147483648, 0.9661458333333712, 0][72, 1.0546875, 41][-2147483648, 3.9453124999999716, 0][68, 1.0755208333333333, 41][-2147483648, 1.9244791666666572, 0][70, 1.0338541666666667, 42][-2147483648, 1.9453125000000284, 0][70, 2.1380208333333335, 46][-2147483648, 0.8828125, 0][70, 0.9713541666666666, 43][-2147483648, 3.0078125, 0][66, 1.1380208333333333, 46][-2147483648, 1.8828124999999716, 0][68, 2.0546875, 40][-2147483648, 5.945312499999972, 0][70, 1.0963541666666667, 50][-2147483648, 0.9036458333333428, 0][65, 3.9713541666666665, 41][-2147483648, 4.028645833333371, 0][69, 2.9296875, 56][-2147483648, 7.049479166666657, 0][77, 2.1380208333333335, 64][-2147483648, 1.8828125, 0][72, 1.0963541666666667, 69][-2147483648, 7.903645833333343, 0][75, 1.0755208333333333, 61][-2147483648, 7.903645833333343, 0][78, 1.1588541666666667, 50][-2147483648, 1.8411458333333428, 0][73, 1.1380208333333333, 46][-2147483648, 2.8411458333333144, 0][73, 1.1171875, 43][-2147483648, 0.9244791666666572, 0][71, 1.0546875, 41][-2147483648, 1.9244791666666856, 0][71, 1.1796875, 46][-2147483648, 0.8411458333333428, 0][71, 1.0755208333333333, 46][-2147483648, 0.9036458333333428, 0][58, 5.9921875, 52][-2147483648, 13.007812500000057, 0][66, 1.0755208333333333, 43][-2147483648, 90.94531249999994, 0][75, 0.9713541666666666, 72][-2147483648, 10.028645833333371, 0][74, 1.0755208333333333, 49][-2147483648, 1.903645833333428, 0][75, 1.0130208333333333, 50][-2147483648, 3.007812500000057, 0][77, 0.9921875, 49][-2147483648, 3.9869791666666288, 0][77, 9.950520833333334, 69][-2147483648, 10.070312500000057, 0][77, 1.0963541666666667, 61][-2147483648, 8.8828125, 0][80, 6.013020833333333, 58][-2147483648, 8.986979166666629, 0][87, 2.0130208333333335, 66][-2147483648, 0.9869791666666856, 0][87, 1.0755208333333333, 72][-2147483648, 0.9244791666666856, 0][85, 1.1171875, 77][-2147483648, 1.9036458333333144, 0][87, 1.1171875, 77][-2147483648, 1.8828124999999432, 0][87, 1.0963541666666667, 76][-2147483648, 0.9036458333333712, 0][90, 1.0755208333333333, 74][-2147483648, 0.9036458333333144, 0][90, 1.1380208333333333, 78][-2147483648, 0.8619791666666856, 0][94, 11.908854166666666, 78][-2147483648, 55.09114583333354, 0][70, 1.0963541666666667, 43][-2147483648, 1.9244791666666288, 0][70, 1.0755208333333333, 41][-2147483648, 1.9036458333333712, 0][72, 1.1171875, 40][-2147483648, 0.9036458333333144, 0][70, 1.0963541666666667, 41][-2147483648, 0.8828125, 0][73, 1.1171875, 50][-2147483648, 1.9036458333333712, 0][75, 0.9921875, 58][-2147483648, 16.986979166666686, 0][72, 1.0963541666666667, 42][-2147483648, 0.9036458333334849, 0][72, 1.0755208333333333, 50][-2147483648, 1.924479166666515, 0][77, 1.1171875, 58][-2147483648, 0.8828125, 0][77, 1.1171875, 61][-2147483648, 0.8828125, 0][73, 1.0963541666666667, 66][-2147483648, 0.9036458333333712, 0][70, 1.1171875, 50][-2147483648, 0.8828124999998863, 0][66, 1.1380208333333333, 41][-2147483648, 1.8619791666668561, 0][65, 1.1380208333333333, 37][-2147483648, 0.8619791666666288, 0][65, 4.013020833333333, 43][-2147483648, 6.986979166666515, 0][70, 1.1380208333333333, 40][70, 5.971354166666667, 52]])\\n(def voice-2 [[66, 4.013020833333333, 55][65, 13.013020833333334, 57][63, 2.1588541666666665, 64][-2147483648, 0.8151041666666643, 0][63, 6.013020833333333, 60][-2147483648, 2.9869791666666643, 0][68, 2.0130208333333335, 64][66, 24.013020833333332, 53][60, 4.013020833333333, 60][-2147483648, 3.9609375000000284, 0][66, 2.1380208333333335, 56][-2147483648, 9.861979166666657, 0][58, 6.013020833333333, 76][63, 4.013020833333333, 76][60, 1.1588541666666667, 98][-2147483648, 0.8151041666666714, 0][72, 4.013020833333333, 98][71, 4.013020833333333, 88][-2147483648, 13.973958333333343, 0][63, 2.1171875, 68][-2147483648, 7.882812499999986, 0][58, 2.0130208333333335, 64][-2147483648, 11.986979166666657, 0][60, 2.0963541666666665, 60][-2147483648, 3.903645833333343, 0][61, 4.013020833333333, 60][60, 1.1588541666666667, 56][-2147483648, 0.828125, 0][58, 2.1380208333333335, 56][-2147483648, 1.8619791666666572, 0][61, 4.013020833333333, 64][-2147483648, 1.9869791666666003, 0][66, 2.0130208333333335, 64][65, 6.013020833333333, 76][-2147483648, 53.97395833333334, 0][56, 4.158854166666667, 84][-2147483648, 3.8411458333333144, 0][58, 3.0130208333333335, 76][-2147483648, 2.9869791666666856, 0][66, 2.1588541666666665, 68][-2147483648, 12.841145833333343, 0][63, 2.0546875, 80][61, 1.0963541666666667, 68][-2147483648, 3.8489583333333144, 0][68, 3.9921875, 72][61, 22.158854166666668, 68][-2147483648, 2.8411458333333144, 0][58, 1.1588541666666667, 76][-2147483648, 5.8411458333332575, 0][66, 2.2421875, 80][-2147483648, 12.7578125, 0][63, 2.0130208333333335, 96][61, 1.1380208333333333, 112][-2147483648, 3.8697916666666856, 0][60, 1.1875, 116][-2147483648, 0.7916666666666288, 0][72, 6.013020833333333, 97][65, 8.013020833333334, 84][58, 4.096354166666667, 88][-2147483648, 3.8776041666667993, 0][61, 2.2005208333333335, 84][-2147483648, 1.7994791666667993, 0][65, 8.013020833333334, 92][61, 6.013020833333333, 100][59, 4.013020833333333, 92][63, 5.1171875, 104][-2147483648, 0.8437499999998863, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][61, 1.1171875, 108][-2147483648, 0.8828124999999432, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333712, 0][65, 1.1171875, 108][-2147483648, 0.8828125, 0][63, 1.1171875, 112][-2147483648, 0.8828125, 0][66, 1.1380208333333333, 104][-2147483648, 0.8619791666666856, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][77, 4.013020833333333, 108][73, 4.013020833333333, 112][75, 4.013020833333333, 112][84, 3.9713541666666665, 112][84, 4.013020833333333, 108][85, 2.0130208333333335, 100][87, 2.0130208333333335, 100][89, 4.013020833333333, 118][90, 7.971354166666667, 123][83, 3.9713541666666665, 124][88, 12.013020833333334, 120][-2147483648, 4.981770833333314, 0][66, 2.0130208333333335, 76][64, 5.971354166666667, 76][64, 2.0130208333333335, 72][62, 5.950520833333333, 68][66, 2.0130208333333335, 72][60, 8.013020833333334, 60][-2147483648, 3.9739583333333712, 0][66, 2.1380208333333335, 56][-2147483648, 9.8619791666668, 0][58, 6.158854166666667, 84][-2147483648, 8.841145833333314, 0][68, 2.0130208333333335, 104][66, 24.013020833333332, 76][65, 4.013020833333333, 60][-2147483648, 2.9609375000002274, 0][66, 2.0130208333333335, 56][65, 12.013020833333334, 56][-2147483648, 1.9739583333331439, 0][66, 2.0130208333333335, 57][65, 15.971354166666666, 57][65, 8.013020833333334, 56][58, 4.013020833333333, 55][57, 10.013020833333334, 58][58, 6.013020833333333, 64][60, 6.013020833333333, 60][-2147483648, 2.947916666666657, 0][61, 1.9713541666666667, 60][61, 20.013020833333332, 57][60, 3.9296875, 64][-2147483648, 8.057291666666686, 0][58, 2.1171875, 57][-2147483648, 12.882812499999972, 0][63, 2.1796875, 80][-2147483648, 5.8203125, 0][72, 0.9505208333333334, 88][-2147483648, 24.049479166666686, 0][56, 8.138020833333334, 72][-2147483648, 15.861979166666657, 0][63, 4.096354166666667, 68][-2147483648, 4.903645833333343, 0][58, 0.9505208333333334, 53][-2147483648, 2.0494791666666288, 0][63, 2.0963541666666665, 57][-2147483648, 5.903645833333314, 0][58, 2.0130208333333335, 64][57, 4.1171875, 68][-2147483648, 59.86979166666666, 0][59, 4.158854166666667, 80][-2147483648, 7.841145833333371, 0][65, 13.013020833333334, 80][-2147483648, 2.9869791666666856, 0][63, 4.221354166666667, 68][-2147483648, 3.7994791666666288, 0][68, 2.0963541666666665, 72][-2147483648, 19.8828125, 0][60, 3.1171875, 76][-2147483648, 0.8828125, 0][65, 3.9921875, 80][-2147483648, 4.007812499999943, 0][65, 13.013020833333334, 100][-2147483648, 2.9869791666666288, 0][60, 3.9296875, 104][-2147483648, 1.0703125000000568, 0][72, 0.9713541666666666, 94][-2147483648, 18.028645833333314, 0][60, 4.013020833333333, 88][-2147483648, 1.9869791666667993, 0][63, 2.0130208333333335, 72][56, 8.013020833333334, 84][-2147483648, 14.973958333333258, 0][61, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.1380208333333333, 116][-2147483648, 0.8619791666666288, 0][63, 1.1171875, 116][-2147483648, 0.8828125, 0][63, 1.0963541666666667, 112][-2147483648, 0.9036458333333712, 0][66, 1.1171875, 108][-2147483648, 0.8828125, 0][65, 1.0963541666666667, 100][-2147483648, 0.9036458333333144, 0][65, 1.0963541666666667, 96][-2147483648, 0.9036458333333144, 0][68, 1.0755208333333333, 104][-2147483648, 1.9244791666667425, 0][84, 4.013020833333333, 116][82, 6.013020833333333, 116][77, 4.013020833333333, 100][80, 2.1380208333333335, 104][-2147483648, 1.8229166666666856, 0][78, 2.0130208333333335, 96][82, 6.138020833333333, 104][-2147483648, 7.869791666666629, 0][90, 3.9921875, 116][83, 12.013020833333334, 124][-2147483648, 4.973958333333314, 0][58, 2.0130208333333335, 76][56, 5.950520833333333, 80][56, 2.0130208333333335, 80][57, 6.013020833333333, 72][62, 2.0130208333333335, 56][55, 4.013020833333333, 76][57, 4.013020833333333, 64][-2147483648, 3.934895833333485, 0][61, 2.1380208333333335, 60][-2147483648, 12.8619791666668, 0][63, 2.0130208333333335, 96][61, 1.0130208333333333, 96][63, 6.013020833333333, 108][-2147483648, 2.960937500000057, 0][61, 10.013020833333334, 116][60, 14.013020833333334, 68][58, 2.0130208333333335, 68][57, 4.013020833333333, 64][-2147483648, 2.9479166666667425, 0][61, 2.0130208333333335, 60][60, 12.013020833333334, 64][61, 1.0130208333333333, 64][-2147483648, 44.986979166666686, 0][65, 13.013020833333334, 72][-2147483648, 1.986979166666643, 0][61, 1.0130208333333333, 76][-2147483648, 177.98697916666663, 0][66, 24.138020833333332, 68][-2147483648, 111.86197916666663, 0][82, 2.0130208333333335, 96][-2147483648, 68.98697916666657, 0][65, 13.013020833333334, 64][-2147483648, 2.9869791666666856, 0][60, 6.013020833333333, 108][57, 10.013020833333334, 68][-2147483648, 207.98697916666663, 0][57, 4.013020833333333, 72][-2147483648, 178.98697916666652, 0][60, 10.013020833333334, 64]])\\n(def voice-3 [[61, 4.013020833333333, 62][60, 10.013020833333334, 65][58, 6.013020833333333, 66][60, 6.013020833333333, 54][-2147483648, 2.9479166666666643, 0][60, 2.0755208333333335, 53][58, 24.013020833333332, 57][-2147483648, 7.911458333333357, 0][61, 2.0130208333333335, 60][60, 10.013020833333334, 71][58, 6.013020833333333, 77][60, 8.013020833333334, 84][63, 9.013020833333334, 76][62, 1.1380208333333333, 68][-2147483648, 0.7968750000000568, 0][65, 1.1171875, 67][-2147483648, 0.8828124999999858, 0][63, 1.1796875, 70][-2147483648, 0.8203125, 0][63, 1.1380208333333333, 76][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 84][-2147483648, 0.8411458333333144, 0][65, 1.1171875, 72][-2147483648, 0.9036458333333428, 0][65, 1.0755208333333333, 84][-2147483648, 0.9036458333333428, 0][68, 1.1588541666666667, 88][-2147483648, 7.841145833333371, 0][65, 4.138020833333333, 96][-2147483648, 4.861979166666657, 0][63, 1.1796875, 89][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 92][-2147483648, 0.8619791666666572, 0][61, 1.1796875, 90][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 90][-2147483648, 0.8619791666666572, 0][54, 1.1380208333333333, 90][-2147483648, 0.8619791666666856, 0][54, 1.1171875, 88][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][61, 1.0963541666666667, 83][-2147483648, 0.9036458333333428, 0][61, 1.0963541666666667, 82][-2147483648, 0.9036458333333428, 0][60, 1.0755208333333333, 84][58, 4.013020833333333, 83][-2147483648, 4.911458333333286, 0][61, 1.1588541666666667, 64][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 84][-2147483648, 0.8619791666666572, 0][63, 1.2005208333333333, 86][-2147483648, 0.7994791666666572, 0][66, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][65, 1.1171875, 100][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][68, 1.1796875, 88][-2147483648, 0.8203125, 0][72, 0.9713541666666666, 83][72, 5.9921875, 80][70, 6.1796875, 79][-2147483648, 1.807291666666714, 0][63, 4.950520833333333, 75][63, 1.1171875, 81][-2147483648, 0.8828124999999716, 0][65, 1.1588541666666667, 96][-2147483648, 2.8411458333333144, 0][61, 1.0963541666666667, 75][-2147483648, 1.9036458333333144, 0][65, 2.0963541666666665, 60][-2147483648, 2.903645833333343, 0][65, 0.9713541666666666, 52][63, 0.9505208333333334, 56][65, 0.9505208333333334, 52][63, 2.9505208333333335, 56][63, 1.1796875, 53][-2147483648, 0.8203125, 0][63, 1.0963541666666667, 68][-2147483648, 0.9244791666666288, 0][63, 1.0963541666666667, 76][-2147483648, 0.8828125, 0][59, 1.0963541666666667, 58][-2147483648, 3.9036458333333144, 0][62, 3.1380208333333335, 72][-2147483648, 0.8619791666666288, 0][58, 1.1588541666666667, 60][-2147483648, 0.8411458333333997, 0][61, 2.1588541666666665, 68][-2147483648, 4.841145833333343, 0][60, 1.0755208333333333, 60][63, 1.1796875, 60][-2147483648, 0.7447916666666856, 0][58, 8.013020833333334, 70][56, 4.013020833333333, 68][-2147483648, 3.9739583333333144, 0][53, 2.0963541666666665, 69][-2147483648, 7.903645833333314, 0][51, 16.1171875, 74][-2147483648, 5.8828125, 0][61, 2.1380208333333335, 79][-2147483648, 7.861979166666629, 0][54, 8.013020833333334, 71][63, 8.013020833333334, 76][-2147483648, 11.973958333333258, 0][54, 4.013020833333333, 76][53, 4.013020833333333, 96][51, 4.013020833333333, 92][49, 8.013020833333334, 88][54, 6.013020833333333, 84][66, 4.9921875, 76][75, 1.9713541666666667, 68][75, 1.0130208333333333, 68][72, 4.013020833333333, 76][77, 8.013020833333334, 88][70, 5.013020833333333, 84][-2147483648, 0.9192708333333144, 0][70, 1.1380208333333333, 90][-2147483648, 0.8619791666665719, 0][69, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][72, 1.1171875, 88][-2147483648, 0.8828125, 0][72, 1.1171875, 84][-2147483648, 0.8828124999999432, 0][70, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][73, 1.1171875, 84][-2147483648, 0.8828125, 0][73, 1.1380208333333333, 92][-2147483648, 0.8619791666667425, 0][72, 2.0130208333333335, 92][77, 1.9296875, 94][73, 1.9296875, 97][75, 1.9505208333333333, 98][77, 4.013020833333333, 100][85, 8.013020833333334, 101][82, 4.013020833333333, 100][80, 12.013020833333334, 99][-2147483648, 4.947916666666856, 0][59, 1.9505208333333333, 84][59, 6.013020833333333, 72][57, 1.9505208333333333, 74][57, 6.013020833333333, 68][59, 2.0130208333333335, 62][52, 4.013020833333333, 62][53, 4.013020833333333, 60][-2147483648, 1.9479166666667425, 0][58, 5.013020833333333, 69][57, 1.1380208333333333, 69][-2147483648, 0.8489583333333712, 0][60, 1.1171875, 66][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 62][-2147483648, 0.8619791666666856, 0][58, 1.1171875, 64][-2147483648, 0.8828125, 0][61, 1.1171875, 80][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 72][-2147483648, 0.8828125000000568, 0][60, 1.1171875, 68][-2147483648, 0.8828124999999432, 0][63, 1.1171875, 92][-2147483648, 6.903645833333371, 0][60, 3.9296875, 96][58, 5.013020833333333, 68][61, 1.1171875, 64][-2147483648, 0.8697916666666288, 0][58, 1.0963541666666667, 84][-2147483648, 0.9036458333333712, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][65, 1.1171875, 88][-2147483648, 0.8828125, 0][61, 1.1171875, 96][-2147483648, 0.8828125, 0][58, 1.1380208333333333, 88][-2147483648, 0.8619791666667425, 0][54, 1.1380208333333333, 68][-2147483648, 0.8619791666666288, 0][56, 1.1171875, 80][-2147483648, 0.8828125, 0][54, 1.0755208333333333, 68][53, 4.013020833333333, 76][-2147483648, 0.9114583333333712, 0][58, 5.1171875, 75][-2147483648, 0.8828125000001137, 0][58, 1.1380208333333333, 80][-2147483648, 0.8619791666665151, 0][57, 8.013020833333334, 65][-2147483648, 1.9869791666664014, 0][61, 2.0130208333333335, 64][60, 15.8671875, 60][60, 8.013020833333334, 64][57, 4.013020833333333, 56][-2147483648, 40.00781250000004, 0][63, 1.1171875, 69][-2147483648, 0.8619791666666572, 0][62, 1.1171875, 69][-2147483648, 0.8828125, 0][65, 1.1380208333333333, 68][-2147483648, 0.8619791666666714, 0][65, 1.1380208333333333, 81][-2147483648, 0.8619791666666572, 0][63, 1.1380208333333333, 64][-2147483648, 0.8619791666666714, 0][66, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][66, 1.1380208333333333, 96][-2147483648, 0.8619791666666856, 0][65, 7.9296875, 100][-2147483648, 4.0703125, 0][63, 4.971354166666667, 90][-2147483648, 1.0286458333333428, 0][65, 1.0963541666666667, 88][-2147483648, 0.9036458333333428, 0][63, 1.1588541666666667, 89][-2147483648, 0.8411458333333428, 0][60, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][56, 1.1380208333333333, 88][-2147483648, 0.8619791666666856, 0][53, 1.1588541666666667, 93][-2147483648, 0.8411458333333428, 0][56, 1.1380208333333333, 87][-2147483648, 0.8619791666666572, 0][60, 1.1171875, 85][-2147483648, 0.8828125, 0][63, 1.1796875, 81][-2147483648, 0.8203125, 0][58, 1.1380208333333333, 87][-2147483648, 4.861979166666657, 0][63, 5.013020833333333, 68][-2147483648, 1.0078124999999716, 0][63, 1.0963541666666667, 66][-2147483648, 0.8828125, 0][61, 1.1588541666666667, 80][-2147483648, 0.8411458333333428, 0][65, 1.1380208333333333, 88][-2147483648, 0.8619791666666572, 0][65, 1.1380208333333333, 80][-2147483648, 0.8619791666666856, 0][63, 1.1796875, 96][-2147483648, 0.8203125, 0][66, 1.1380208333333333, 84][-2147483648, 0.8619791666666856, 0][66, 1.1796875, 84][-2147483648, 0.8203125, 0][65, 1.3046875, 85][-2147483648, 12.695312500000057, 0][65, 2.0130208333333335, 80][-2147483648, 5.986979166666629, 0][66, 1.1796875, 88][-2147483648, 0.8203125, 0][61, 2.9505208333333335, 78][-2147483648, 1.0494791666666288, 0][63, 2.1380208333333335, 64][-2147483648, 1.8619791666666288, 0][66, 3.0130208333333335, 53][-2147483648, 6.986979166666657, 0][61, 1.1588541666666667, 60][-2147483648, 0.8411458333333144, 0][64, 1.1171875, 72][-2147483648, 0.8828124999999716, 0][61, 1.1171875, 56][-2147483648, 0.8828125, 0][63, 4.138020833333333, 72][-2147483648, 2.882812499999943, 0][60, 1.0546875, 70][-2147483648, 0.9244791666666856, 0][60, 1.1380208333333333, 64][-2147483648, 1.8619791666666856, 0][60, 4.950520833333333, 68][-2147483648, 2.0494791666666856, 0][61, 1.1380208333333333, 64][-2147483648, 17.86197916666663, 0][54, 8.1171875, 68][-2147483648, 15.8828125, 0][53, 4.013020833333333, 78][-2147483648, 1.9869791666666856, 0][51, 2.1588541666666665, 81][-2147483648, 9.841145833333258, 0][61, 2.1171875, 74][-2147483648, 3.882812499999943, 0][56, 20.013020833333332, 72][-2147483648, 50.98697916666646, 0][69, 1.1380208333333333, 96][-2147483648, 0.8619791666666288, 0][72, 1.0963541666666667, 80][-2147483648, 0.9036458333332575, 0][70, 1.0963541666666667, 84][-2147483648, 0.9036458333333144, 0][70, 1.1171875, 88][-2147483648, 0.8828125, 0][73, 1.1588541666666667, 96][-2147483648, 0.8411458333332575, 0][72, 1.1171875, 76][-2147483648, 0.8828125, 0][72, 1.0755208333333333, 88][-2147483648, 0.9244791666666856, 0][75, 1.0963541666666667, 93][-2147483648, 19.90364583333337, 0][78, 4.013020833333333, 102][-2147483648, 16.9869791666668, 0][54, 2.0130208333333335, 90][52, 5.950520833333333, 71][52, 1.9713541666666667, 66][54, 5.950520833333333, 62][54, 2.0130208333333335, 63][-2147483648, 3.9869791666666856, 0][48, 4.013020833333333, 60][-2147483648, 7.986979166666686, 0][58, 1.1171875, 65][-2147483648, 0.8828125, 0][57, 1.1380208333333333, 63][-2147483648, 0.8619791666666856, 0][60, 1.1171875, 63][-2147483648, 0.8828125, 0][60, 1.1588541666666667, 72][-2147483648, 0.8411458333333712, 0][58, 1.1380208333333333, 76][-2147483648, 0.8619791666667425, 0][61, 1.1380208333333333, 76][-2147483648, 0.8619791666666856, 0][61, 1.1171875, 80][-2147483648, 0.8828124999999432, 0][60, 5.950520833333333, 88][-2147483648, 11.049479166666742, 0][60, 1.1171875, 72][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 92][-2147483648, 0.9244791666666288, 0][63, 1.1380208333333333, 100][-2147483648, 0.8619791666666288, 0][66, 1.1380208333333333, 88][-2147483648, 0.8619791666666288, 0][63, 1.1588541666666667, 88][-2147483648, 0.8411458333333712, 0][60, 1.1588541666666667, 96][-2147483648, 0.8411458333333712, 0][56, 1.1171875, 76][-2147483648, 0.8828125000001137, 0][58, 1.1588541666666667, 68][-2147483648, 0.8411458333333712, 0][53, 1.1171875, 64][-2147483648, 10.882812500000227, 0][57, 1.1171875, 69][-2147483648, 0.8828125, 0][60, 1.0755208333333333, 72][51, 2.1380208333333335, 62][-2147483648, 7.861979166666686, 0][54, 8.013020833333334, 60][-2147483648, 41.98697916666663, 0][60, 10.013020833333334, 73][-2147483648, 1.986979166666572, 0][58, 4.013020833333333, 77][53, 8.013020833333334, 56][-2147483648, 49.98697916666663, 0][53, 8.013020833333334, 76]])\\n(def voice-4 [[39, 4.013020833333333, 66][41, 10.013020833333334, 72][42, 6.013020833333333, 66][44, 6.013020833333333, 47][-2147483648, 2.947916666666657, 0][49, 1.9505208333333333, 47][49, 8.013020833333334, 47][46, 16.013020833333332, 47][48, 4.013020833333333, 63][-2147483648, 3.960937500000014, 0][39, 2.0130208333333335, 47][41, 10.013020833333334, 72][42, 6.013020833333333, 69][44, 8.013020833333334, 69][53, 10.013020833333334, 84][-2147483648, 1.9348958333333286, 0][42, 4.013020833333333, 78][41, 4.013020833333333, 58][39, 4.013020833333333, 47][37, 6.013020833333333, 47][42, 6.013020833333333, 51][54, 8.013020833333334, 48][51, 4.013020833333333, 47][-2147483648, 3.908854166666657, 0][39, 8.013020833333334, 47][46, 4.013020833333333, 67][-2147483648, 1.9739583333333144, 0][39, 2.0130208333333335, 66][41, 4.013020833333333, 72][42, 4.013020833333333, 66][44, 4.013020833333333, 47][46, 4.013020833333333, 66][47, 2.0130208333333335, 54][41, 1.1588541666666667, 60][-2147483648, 0.7838541666666288, 0][56, 7.9921875, 68][44, 4.013020833333333, 74][53, 12.013020833333334, 47][54, 2.1796875, 47][-2147483648, 1.7812499999999432, 0][54, 5.9296875, 56][54, 6.013020833333333, 47][47, 7.013020833333333, 47][44, 1.0963541666666667, 47][-2147483648, 3.877604166666657, 0][58, 4.9140625, 43][57, 1.1145833333333333, 47][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666666856, 0][58, 1.09375, 63][-2147483648, 0.9062500000000284, 0][58, 1.1354166666666667, 64][-2147483648, 0.8645833333333712, 0][61, 1.09375, 62][-2147483648, 0.90625, 0][60, 1.0729166666666667, 63][61, 1.09375, 66][-2147483648, 0.8333333333333712, 0][61, 1.09375, 78][-2147483648, 0.9062500000000568, 0][60, 5.721354166666667, 73][-2147483648, 0.2786458333333144, 0][60, 4.015625, 69][58, 4.872395833333333, 65][58, 1.09375, 62][-2147483648, 0.90625, 0][61, 1.1354166666666667, 63][-2147483648, 0.8645833333332575, 0][56, 1.09375, 72][-2147483648, 0.90625, 0][53, 1.09375, 72][-2147483648, 0.9062500000000568, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][49, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][53, 1.0729166666666667, 78][54, 1.09375, 61][-2147483648, 0.8333333333333144, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][53, 1.0729166666666667, 54][54, 1.0729166666666667, 47][-2147483648, 3.854166666666572, 0][58, 4.9140625, 54][57, 1.0729166666666667, 47][58, 1.1354166666666667, 60][-2147483648, 0.7916666666666856, 0][57, 1.0729166666666667, 66][58, 1.1145833333333333, 72][-2147483648, 0.8124999999999432, 0][58, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][61, 1.1145833333333333, 72][-2147483648, 0.8854166666666856, 0][60, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][60, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][63, 0.9921875, 72][60, 1.15625, 72][-2147483648, 0.8437499999999432, 0][66, 5.893229166666667, 79][65, 3.9322916666666665, 84][71, 3.9322916666666665, 84][70, 4.872395833333333, 72][70, 0.9921875, 65][73, 0.9296875, 68][72, 0.9921875, 63][68, 2.890625, 47][68, 0.9921875, 64][70, 1.9713541666666667, 72][72, 1.9713541666666667, 72][73, 4.9140625, 84][72, 0.9505208333333334, 66][70, 0.9713541666666666, 84][72, 0.9921875, 72][70, 2.890625, 66][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][70, 1.1354166666666667, 66][-2147483648, 0.8645833333333144, 0][70, 1.1145833333333333, 66][-2147483648, 0.8854166666666288, 0][66, 1.09375, 56][-2147483648, 3.90625, 0][69, 3.9322916666666665, 53][70, 3.9322916666666665, 51][72, 3.9322916666666665, 55][73, 3.9322916666666665, 53][65, 3.9322916666666665, 55][66, 7.854166666666667, 56][68, 3.9322916666666665, 75][70, 5.893229166666667, 75][72, 1.9713541666666667, 72][73, 3.9322916666666665, 78][78, 7.854166666666667, 84][75, 3.9322916666666665, 81][76, 11.776041666666666, 75][-2147483648, 5.223958333333371, 0][47, 1.9114583333333333, 52][47, 5.893229166666667, 52][45, 1.9322916666666667, 47][45, 5.893229166666667, 51][50, 1.9713541666666667, 51][43, 3.9322916666666665, 51][41, 3.9322916666666665, 51][-2147483648, 4.067708333333314, 0][46, 1.9713541666666667, 53][48, 9.815104166666666, 51][49, 5.893229166666667, 69][51, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][49, 1.9322916666666667, 81][49, 7.833333333333333, 51][46, 15.697916666666666, 53][-2147483648, 0.30208333333337123, 0][48, 3.9322916666666665, 52][-2147483648, 3.0677083333333712, 0][46, 1.9713541666666667, 51][48, 11.776041666666666, 48][39, 3.9322916666666665, 48][41, 15.6171875, 53][-2147483648, 0.3828125000001137, 0][41, 7.854166666666667, 56][41, 2.0130208333333335, 47][42, 8.013020833333334, 47][39, 16.013020833333332, 47][41, 4.013020833333333, 63][-2147483648, 29.98958333333333, 0][44, 11.971354166666666, 47][-2147483648, 23.986979166666686, 0][47, 4.138020833333333, 47][-2147483648, 3.861979166666657, 0][44, 4.013020833333333, 52][37, 4.013020833333333, 55][-2147483648, 34.97395833333334, 0][56, 0.9505208333333334, 47][-2147483648, 12.049479166666572, 0][43, 4.013020833333333, 47][44, 4.013020833333333, 55][46, 4.013020833333333, 47][44, 4.013020833333333, 47][46, 6.013020833333333, 46][47, 5.9296875, 47][40, 4.013020833333333, 47][-2147483648, 3.986979166666657, 0][46, 4.013020833333333, 49][-2147483648, 5.986979166666657, 0][58, 1.09375, 60][-2147483648, 0.9062500000000284, 0][57, 1.1354166666666667, 66][-2147483648, 0.8645833333333712, 0][60, 1.09375, 60][-2147483648, 0.90625, 0][60, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][58, 1.1354166666666667, 66][-2147483648, 1.8645833333333712, 0][60, 1.0729166666666667, 69][-2147483648, 0.9270833333333712, 0][63, 1.09375, 66][-2147483648, 15.906250000000057, 0][60, 1.1145833333333333, 63][-2147483648, 0.8854166666666288, 0][58, 1.09375, 65][-2147483648, 0.90625, 0][54, 1.1145833333333333, 60][-2147483648, 0.8854166666667425, 0][51, 1.09375, 66][-2147483648, 0.90625, 0][48, 1.09375, 78][-2147483648, 0.90625, 0][51, 1.09375, 78][-2147483648, 1.90625, 0][56, 1.09375, 62][-2147483648, 0.90625, 0][56, 1.1145833333333333, 62][-2147483648, 1.8854166666666856, 0][53, 2.8359375, 64][-2147483648, 8.1640625, 0][60, 1.1145833333333333, 72][-2147483648, 1.8854166666666288, 0][60, 1.09375, 66][-2147483648, 0.90625, 0][60, 1.0729166666666667, 72][-2147483648, 0.9270833333333144, 0][58, 1.1145833333333333, 66][-2147483648, 0.8854166666666856, 0][61, 1.1354166666666667, 78][-2147483648, 0.8645833333333144, 0][61, 1.0729166666666667, 72][-2147483648, 1.9270833333332575, 0][66, 0.9505208333333334, 78][-2147483648, 42.04947916666674, 0][68, 1.1145833333333333, 65][-2147483648, 0.8854166666666856, 0][71, 1.1145833333333333, 72][-2147483648, 0.8854166666666288, 0][68, 1.0729166666666667, 62][-2147483648, 0.9270833333333144, 0][70, 3.9322916666666665, 65][-2147483648, 73.06770833333337, 0][39, 1.9713541666666667, 56][40, 5.893229166666667, 51][37, 1.9713541666666667, 47][38, 5.893229166666667, 51][47, 1.9713541666666667, 52][36, 3.9322916666666665, 50][-2147483648, 8.067708333333258, 0][39, 1.9713541666666667, 53][41, 9.815104166666666, 52][42, 5.893229166666667, 69][44, 5.893229166666667, 81][-2147483648, 3.1067708333333144, 0][41, 1.9713541666666667, 81][42, 7.854166666666667, 53][39, 15.697916666666666, 51][-2147483648, 0.30208333333337123, 0][41, 3.9322916666666665, 54][-2147483648, 3.0677083333333712, 0][39, 1.9713541666666667, 49][41, 11.776041666666666, 48][39, 4.013020833333333, 47][-2147483648, 69.98697916666663, 0][56, 2.0130208333333335, 47][39, 6.013020833333333, 54]])\\n(def voice-5 [[27, 4.013020833333333, 37][29, 10.013020833333334, 59][30, 6.013020833333333, 59][32, 6.013020833333333, 59][-2147483648, 2.9479166666666714, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][27, 16.013020833333332, 37][29, 4.013020833333333, 37][-2147483648, 3.9479166666666714, 0][27, 2.0130208333333335, 53][29, 10.013020833333334, 53][30, 6.013020833333333, 59][32, 20.013020833333332, 59][30, 4.013020833333333, 60][41, 4.013020833333333, 65][39, 4.013020833333333, 71][-2147483648, 5.908854166666686, 0][30, 6.013020833333333, 77][35, 4.013020833333333, 71][39, 4.013020833333333, 59][32, 4.013020833333333, 41][25, 4.013020833333333, 53][27, 8.013020833333334, 47][34, 4.013020833333333, 59][-2147483648, 280.90885416666663, 0][39, 1.9921875, 37][40, 5.9921875, 37][37, 2.0130208333333335, 37][38, 6.013020833333333, 37][35, 2.0130208333333335, 37][36, 4.013020833333333, 37][29, 4.013020833333333, 37][-2147483648, 3.9218750000001137, 0][27, 2.0130208333333335, 37][29, 10.013020833333334, 37][30, 6.013020833333333, 65][32, 6.013020833333333, 65][-2147483648, 2.9479166666667425, 0][29, 2.0130208333333335, 65][30, 8.013020833333334, 37][39, 16.013020833333332, 37][41, 4.013020833333333, 37][-2147483648, 2.9479166666666288, 0][39, 2.0130208333333335, 37][41, 12.013020833333334, 47][-2147483648, 1.9739583333332575, 0][27, 2.0130208333333335, 37][29, 15.783854166666666, 37][29, 7.9921875, 37][37, 6.013020833333333, 77]])\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)\\n        piano-part-5 (new Part   \\"Piano 5\\" JMC/CONTRABASS 0)\\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)\\n        phrase-5     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-5]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-5   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    (.addPhrase piano-part-5 phrase-5)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    (.addPart   score piano-part-5)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/Serial/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/grosse_fuge_(c)unknown.mid\\")" ";; Switching to mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11 namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/grosse_fuge_(c)unknown.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")" ";; Switching to mx.clojure.mx-template namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")" ";; Switching to mx.clojure.pitches namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")" "(clojure.core/ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11)\\n(ns mx.clojure.scores.samuel-barber-adagio-for-strings-opus-11\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:use mx.clojure.scores.air-on-g-string-bach))\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n(clojure.core/ns mx.clojure.pitches)" "(clojure.core/ns mx.clojure.scores.scores.air-on-g-string-bach-mx)\\n(ns mx.clojure.scores.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:use mx.clojure.scores.air-on-g-string-bach-score))\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n(clojure.core/ns mx.clojure.pitches)" "(clojure.core/ns mx.clojure.scores.scores.air-on-g-string-bach-mx)\\n(ns mx.clojure.scores.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:use [mx.clojure.scores.air-on-g-string-bach-score]))\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n(clojure.core/ns mx.clojure.pitches)" ";; Switching to mx.clojure.pitches namespace" "(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")" "(clojure.core/ns mx.clojure.scores.scores.air-on-g-string-bach-mx)\\n(ns mx.clojure.scores.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:use [mx.clojure.scores.air-on-g-string-bach-score]))\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n(clojure.core/ns mx.clojure.pitches)" "(clojure.core/ns mx.clojure.scores.air-on-g-string-bach-mx)\\n(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:use [mx.clojure.scores.air-on-g-string-bach-score]))\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n\\n(clojure.core/ns mx.clojure.pitches)" ";; Switching to mx.clojure.scores.air-on-g-string-bach-mx namespace" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:use [mx.clojure.scores.air-on-g-string-bach-score]))\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:require [mx.clojure.scores.air-on-g-string-bach-score]))\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(\:require [mx.clojure.scores.air-on-g-string-bach-score])" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:require [mx.clojure.scores.air-on-g-string-bach-score]))\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write])\\n  (\:use [mx.clojure.scores.air-on-g-string-bach-score]))\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n  \\n(include  [mx.clojure.scores.air-on-g-string-bach-score])\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n  \\n(include 'mx.clojure.scores.air-on-g-string-bach-score.clj)\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n  \\n(inc 'mx.clojure.scores.air-on-g-string-bach-score.clj)\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n  \\n(load-file 'mx.clojure.scores.air-on-g-string-bach-score.clj)\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n  \\n(load 'mx.clojure.scores.air-on-g-string-bach-score.clj)\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n  \\n(load \\"mx.clojure.scores.air-on-g-string-bach-score.clj\\")\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(load \\"mx.clojure.scores.air-on-g-string-bach-score.clj\\")" "(load \\"mx.clojure.scores.air-on-g-string-bach-score\\")\\n" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n  \\n(use 'mx.clojure.scores.air-on-g-string-bach-score)\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(use 'mx.clojure.scores.air-on-g-string-bach-score)" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n  \\n(use 'mx.clojure.scores.air-on-g-string-bach-score)\\n\\n;(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air-on-g-string-bach\\")\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" ";; Switching to mx.clojure.scores.air-on-g-string-bach-mx namespace" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air_on_g_string_bach_score\\")\\n  \\n(use 'mx.clojure.scores.air-on-g-string-bach-score)\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(use 'mx.clojure.scores.air-on-g-string-bach-score)" ";; Switching to mx.clojure.scores.air-on-g-string-bach-mx namespace" "(use 'mx.clojure.scores.air-on-g-string-bach-score)" "(ns mx.clojure.scores.air-on-g-string-bach-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air_on_g_string_bach\\")\\n  \\n(use 'mx.clojure.scores.air-on-g-string-bach-score)\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(use 'mx.clojure.scores.air-on-g-string-bach-score)\\n" ";; Switching to mx.clojure.scores.air-on-g-string-bach-mx namespace" "  \\n(use 'mx.clojure.scores.air-on-g-string-bach-score)\\n" ";; Switching to mx.clojure.scores.air-on-g-string-bach-mx namespace" ";; Switching to mx.clojure.scores.air-mx namespace" "(ns mx.clojure.scores.air-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(mx.java.Extractor/exec \\"/Users/maxtuno/Downloads/Air on the G String - Bach.mid\\" \\"air\\")\\n  \\n(use 'mx.clojure.scores.air-score)\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str \\"/Google Drive/tmp/mx/\\" title \\" \\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def midi-path \\"/Users/maxtuno/Downloads/\\")\\n\\n(mx.java.Extractor/exec (str midi-path \\"Air on the G String - Bach.mid\\" \\"air\\")\\n  \\n(use 'mx.clojure.scores.air-score)\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str midi-path title \\" \\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def midi-path \\"/Users/maxtuno/Downloads/\\")\\n\\n(mx.java.Extractor/exec (str midi-path \\"Air on the G String - Bach.mid\\") \\"air\\")\\n  \\n(use 'mx.clojure.scores.air-score)\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str midi-path title \\" \\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" "(ns mx.clojure.scores.air-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def midi-path \\"/Users/maxtuno/Desktop/mx/\\")\\n\\n(mx.java.Extractor/exec (str midi-path \\"Air on the G String - Bach.mid\\") \\"air\\")\\n  \\n(use 'mx.clojure.scores.air-score)\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str midi-path title \\" \\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n" ";; Switching to mx.clojure.scores.air-mx namespace" "(ns mx.clojure.scores.air-mx\\n  (\:refer-clojure \:exclude [\=\=])\\n  (\:use [clojure.core.logic.protocols]\\n        [clojure.core.logic \:exclude [is] \:as l])\\n  (\:require [clojure.core.logic.fd \:as fd])\\n  (\:import [jm.music.data\\n            Score            \\n            Part\\n            Phrase\\n            Note])\\n  (\:import [jm JMC])\\n  (\:import [jm.util Write]))\\n\\n(def midi-path \\"/Users/maxtuno/Desktop/mx/\\")\\n\\n(mx.java.Extractor/exec (str midi-path \\"Air on the G String - Bach.mid\\") \\"air\\")\\n  \\n(use 'mx.clojure.scores.air-score)\\n\\n(defn make-music\\n  []\\n  (let [score        (new Score  title tempo)                  \\n        piano-part-1 (new Part   \\"Piano 1\\" JMC/VIOLIN 0) \\n        piano-part-2 (new Part   \\"Piano 2\\" JMC/VIOLIN 0) \\n        piano-part-3 (new Part   \\"Piano 3\\" JMC/VIOLA 0) \\n        piano-part-4 (new Part   \\"Piano 4\\" JMC/CELLO 0)        \\n        phrase-1     (new Phrase \\"Phrase 1\\" 0.0)\\n        phrase-2     (new Phrase \\"Phrase 2\\" 0.0)\\n        phrase-3     (new Phrase \\"Phrase 3\\" 0.0)\\n        phrase-4     (new Phrase \\"Phrase 4\\" 0.0)]            \\n    \\n    (.setTimeSignature score (first time-signature) (second time-signature))\\n    (.setKeySignature score key-signature)\\n    \\n    (doseq [note voice-1]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-1   (new Note pitch rhythm velocity)))) \\n    \\n    (doseq [note voice-2]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-2   (new Note pitch rhythm velocity)))) \\n    \\n     (doseq [note voice-3]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-3   (new Note pitch rhythm velocity)))) \\n     \\n    (doseq [note voice-4]\\n      (let [pitch    (first  note)\\n            rhythm   (second note)\\n            velocity (last   note)]              \\n        (.addNote phrase-4   (new Note pitch rhythm velocity)))) \\n    \\n    (.addPhrase piano-part-1 phrase-1)\\n    (.addPhrase piano-part-2 phrase-2)\\n    (.addPhrase piano-part-3 phrase-3)\\n    (.addPhrase piano-part-4 phrase-4)\\n    \\n    (.addPart   score piano-part-1)\\n    (.addPart   score piano-part-2)\\n    (.addPart   score piano-part-3)\\n    (.addPart   score piano-part-4)\\n    \\n    (Write/midi score (str midi-path title \\" \\" (new java.util.Date) \\".mid\\"))))\\n\\n(make-music)\\n"]
eclipse.preferences.version=1
