package mx.java;import java.util.Iterator;import java.util.Vector;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import jm.music.data.*;import jm.util.*; public final class Extractor {	@SuppressWarnings({"unchecked" })	public static void exec(String filePath, String name) throws IOException {			Score structure = new Score("Mx");		Read.midi(structure, filePath);			Vector<Part> parts =  structure.getPartList();				File file = new File("./src/mx/clojure/scores/" + name + "_score.clj");				if (!file.exists()) {			file.createNewFile();		}				FileWriter fw = new FileWriter(file.getAbsoluteFile());		BufferedWriter bw = new BufferedWriter(fw);				bw.write("(ns mx.clojure.scores." + name + "-score)\n");		bw.write("(def title \"" + name + "\")\n");		bw.write("(def tempo " + structure.getTempo() + ")\n");		bw.write("(def key-signature " + structure.getKeySignature() + ")\n");		bw.write("(def time-signature [" + structure.getNumerator() + " " + structure.getDenominator() + "])\n");				int voice = 1;				for (Iterator<Part> part = parts.iterator(); part.hasNext();) {									Vector<Phrase> phrases = part.next().getPhraseList();			bw.write("(def " + "voice-" + voice + " [");			for (Iterator<Phrase> phrase = phrases.iterator(); phrase.hasNext();) {				Vector<Note> notes = phrase.next().getNoteList();				for (Iterator<Note> note = notes.iterator(); note.hasNext();) {					Note current = note.next();										bw.write("[" + current.getPitch() + ", " + current.getDuration() + ", " + current.getDynamic() + "]");				}							}						voice++;						bw.write("])\n");		}				bw.close();				structure.empty();			}		    }		  								